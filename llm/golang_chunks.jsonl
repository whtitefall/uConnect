{"file":"forum_backend\\config\\database.go","symbol":"ConnectDatabase","start_line":15,"end_line":33,"code":"func ConnectDatabase() {\r\n\terr := godotenv.Load()\r\n\tif err != nil {\r\n\t\tlog.Fatal(\"Error loading .env file\")\r\n\t}\r\n\r\n\tdsn := fmt.Sprintf(\r\n\t\t\"host=%s user=%s password=%s dbname=%s port=%s sslmode=disable\",\r\n\t\tos.Getenv(\"DB_HOST\"), os.Getenv(\"DB_USER\"), os.Getenv(\"DB_PASSWORD\"),\r\n\t\tos.Getenv(\"DB_NAME\"), os.Getenv(\"DB_PORT\"),\r\n\t)\r\n\r\n\tdb, err := gorm.Open(postgres.Open(dsn), \u0026gorm.Config{})\r\n\tif err != nil {\r\n\t\tlog.Fatal(\"Failed to connect to database:\", err)\r\n\t}\r\n\r\n\tDB = db\r\n}"}
{"file":"forum_backend\\controllers\\auth_controller.go","symbol":"Register","start_line":14,"end_line":37,"code":"func Register(c fiber.Ctx) error {\r\n\tvar data map[string]string\r\n\tif err := c.Bind().Body(\u0026data); err != nil {\r\n\t\treturn c.Status(400).JSON(fiber.Map{\"error\": \"Invalid input\"})\r\n\t}\r\n\r\n\t// 密码加密\r\n\thashedPassword, err := bcrypt.GenerateFromPassword([]byte(data[\"password\"]), 14)\r\n\tif err != nil {\r\n\t\treturn c.Status(500).JSON(fiber.Map{\"error\": \"Password hashing failed\"})\r\n\t}\r\n\r\n\tuser := models.User{\r\n\t\tUsername: data[\"username\"],\r\n\t\tEmail:    data[\"email\"],\r\n\t\tPassword: string(hashedPassword),\r\n\t}\r\n\r\n\tif err := config.DB.Create(\u0026user).Error; err != nil {\r\n\t\treturn c.Status(500).JSON(fiber.Map{\"error\": \"Could not create user\"})\r\n\t}\r\n\r\n\treturn c.JSON(fiber.Map{\"message\": \"User created successfully\"})\r\n}"}
{"file":"forum_backend\\controllers\\auth_controller.go","symbol":"Login","start_line":39,"end_line":68,"code":"func Login(c fiber.Ctx) error {\r\n\tvar data map[string]string\r\n\tif err := c.Bind().Body(\u0026data); err != nil {\r\n\t\treturn c.Status(400).JSON(fiber.Map{\"error\": \"Invalid input\"})\r\n\t}\r\n\r\n\tvar user models.User\r\n\tconfig.DB.Where(\"email = ?\", data[\"email\"]).First(\u0026user)\r\n\tif user.ID == 0 {\r\n\t\treturn c.Status(404).JSON(fiber.Map{\"error\": \"User not found\"})\r\n\t}\r\n\r\n\tif err := bcrypt.CompareHashAndPassword([]byte(user.Password), []byte(data[\"password\"])); err != nil {\r\n\t\treturn c.Status(401).JSON(fiber.Map{\"error\": \"Incorrect password\"})\r\n\t}\r\n\r\n\t// 生成 JWT token\r\n\tclaims := jwt.MapClaims{\r\n\t\t\"id\":  user.ID,\r\n\t\t\"exp\": time.Now().Add(time.Hour * 72).Unix(),\r\n\t}\r\n\ttoken := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)\r\n\r\n\tt, err := token.SignedString([]byte(os.Getenv(\"JWT_SECRET\")))\r\n\tif err != nil {\r\n\t\treturn c.Status(500).JSON(fiber.Map{\"error\": \"Token creation failed\"})\r\n\t}\r\n\r\n\treturn c.JSON(fiber.Map{\"token\": t})\r\n}"}
{"file":"forum_backend\\controllers\\comment_controller.go","symbol":"CreateComment","start_line":11,"end_line":36,"code":"func CreateComment(c fiber.Ctx) error {\r\n\tuser := c.Locals(\"user\").(models.User)\r\n\tpostId, err := strconv.Atoi(c.Params(\"id\"))\r\n\tif err != nil {\r\n\t\treturn c.Status(400).JSON(fiber.Map{\"error\": \"Invalid post ID\"})\r\n\t}\r\n\r\n\tvar commentData struct {\r\n\t\tContent string `json:\"content\"`\r\n\t}\r\n\tif err := c.Bind().Body(\u0026commentData); err != nil {\r\n\t\treturn c.Status(400).JSON(fiber.Map{\"error\": \"Invalid input\"})\r\n\t}\r\n\r\n\tcomment := models.Comment{\r\n\t\tContent: commentData.Content,\r\n\t\tUserID:  user.ID,\r\n\t\tPostID:  uint(postId),\r\n\t}\r\n\r\n\tif err := config.DB.Create(\u0026comment).Error; err != nil {\r\n\t\treturn c.Status(500).JSON(fiber.Map{\"error\": \"Failed to create comment\"})\r\n\t}\r\n\r\n\treturn c.Status(201).JSON(comment)\r\n}"}
{"file":"forum_backend\\controllers\\comment_controller.go","symbol":"GetCommentsByPost","start_line":38,"end_line":51,"code":"func GetCommentsByPost(c fiber.Ctx) error {\r\n\tpostId := c.Params(\"id\")\r\n\r\n\tvar comments []models.Comment\r\n\tif err := config.DB.\r\n\t\tWhere(\"post_id = ?\", postId).\r\n\t\tPreload(\"User\").\r\n\t\tOrder(\"created_at asc\").\r\n\t\tFind(\u0026comments).Error; err != nil {\r\n\t\treturn c.Status(500).JSON(fiber.Map{\"error\": \"Failed to fetch comments\"})\r\n\t}\r\n\r\n\treturn c.JSON(comments)\r\n}"}
{"file":"forum_backend\\controllers\\comment_controller.go","symbol":"DeleteComment","start_line":53,"end_line":71,"code":"func DeleteComment(c fiber.Ctx) error {\r\n\tuser := c.Locals(\"user\").(models.User)\r\n\tcommentId := c.Params(\"id\")\r\n\r\n\tvar comment models.Comment\r\n\tif err := config.DB.First(\u0026comment, commentId).Error; err != nil {\r\n\t\treturn c.Status(404).JSON(fiber.Map{\"error\": \"Comment not found\"})\r\n\t}\r\n\r\n\tif comment.UserID != user.ID {\r\n\t\treturn c.Status(403).JSON(fiber.Map{\"error\": \"You can only delete your own comments\"})\r\n\t}\r\n\r\n\tif err := config.DB.Delete(\u0026comment).Error; err != nil {\r\n\t\treturn c.Status(500).JSON(fiber.Map{\"error\": \"Failed to delete comment\"})\r\n\t}\r\n\r\n\treturn c.JSON(fiber.Map{\"message\": \"Comment deleted successfully\"})\r\n}"}
{"file":"forum_backend\\controllers\\post_controller.go","symbol":"CreatePost","start_line":10,"end_line":32,"code":"func CreatePost(c fiber.Ctx) error {\r\n\tuser := c.Locals(\"user\").(models.User)\r\n\r\n\tvar postData struct {\r\n\t\tTitle   string `json:\"title\"`\r\n\t\tContent string `json:\"content\"`\r\n\t}\r\n\tif err := c.Bind().Body(\u0026postData); err != nil {\r\n\t\treturn c.Status(400).JSON(fiber.Map{\"error\": \"Invalid input\"})\r\n\t}\r\n\r\n\tpost := models.Post{\r\n\t\tTitle:   postData.Title,\r\n\t\tContent: postData.Content,\r\n\t\tUserID:  user.ID,\r\n\t}\r\n\r\n\tif err := config.DB.Create(\u0026post).Error; err != nil {\r\n\t\treturn c.Status(500).JSON(fiber.Map{\"error\": \"Failed to create post\"})\r\n\t}\r\n\r\n\treturn c.Status(201).JSON(post)\r\n}"}
{"file":"forum_backend\\controllers\\post_controller.go","symbol":"GetPosts","start_line":34,"end_line":40,"code":"func GetPosts(c fiber.Ctx) error {\r\n\tvar posts []models.Post\r\n\tif err := config.DB.Preload(\"User\").Order(\"created_at desc\").Find(\u0026posts).Error; err != nil {\r\n\t\treturn c.Status(500).JSON(fiber.Map{\"error\": \"Failed to fetch posts\"})\r\n\t}\r\n\treturn c.JSON(posts)\r\n}"}
{"file":"forum_backend\\controllers\\post_controller.go","symbol":"DeletePost","start_line":42,"end_line":60,"code":"func DeletePost(c fiber.Ctx) error {\r\n\tuser := c.Locals(\"user\").(models.User)\r\n\tpostId := c.Params(\"id\")\r\n\r\n\tvar post models.Post\r\n\tif err := config.DB.First(\u0026post, postId).Error; err != nil {\r\n\t\treturn c.Status(404).JSON(fiber.Map{\"error\": \"Post not found\"})\r\n\t}\r\n\r\n\tif post.UserID != user.ID {\r\n\t\treturn c.Status(403).JSON(fiber.Map{\"error\": \"You can only delete your own posts\"})\r\n\t}\r\n\r\n\tif err := config.DB.Delete(\u0026post).Error; err != nil {\r\n\t\treturn c.Status(500).JSON(fiber.Map{\"error\": \"Failed to delete post\"})\r\n\t}\r\n\r\n\treturn c.JSON(fiber.Map{\"message\": \"Post deleted successfully\"})\r\n}"}
{"file":"forum_backend\\controllers\\user_controller.go","symbol":"GetMyProfile","start_line":10,"end_line":22,"code":"func GetMyProfile(c fiber.Ctx) error {\r\n\tuser := c.Locals(\"user\").(models.User)\r\n\r\n\tvar fullUser models.User\r\n\tif err := config.DB.\r\n\t\tPreload(\"Posts\").\r\n\t\tPreload(\"Comments\").\r\n\t\tFirst(\u0026fullUser, user.ID).Error; err != nil {\r\n\t\treturn c.Status(500).JSON(fiber.Map{\"error\": \"Failed to fetch user profile\"})\r\n\t}\r\n\r\n\treturn c.JSON(fullUser)\r\n}"}
{"file":"forum_backend\\controllers\\user_controller.go","symbol":"GetUserProfile","start_line":24,"end_line":36,"code":"func GetUserProfile(c fiber.Ctx) error {\r\n\tuserId := c.Params(\"id\")\r\n\r\n\tvar user models.User\r\n\tif err := config.DB.\r\n\t\tPreload(\"Posts\").\r\n\t\tPreload(\"Comments\").\r\n\t\tFirst(\u0026user, userId).Error; err != nil {\r\n\t\treturn c.Status(404).JSON(fiber.Map{\"error\": \"User not found\"})\r\n\t}\r\n\r\n\treturn c.JSON(user)\r\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"NewExecutableSchema","start_line":25,"end_line":32,"code":"func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {\n\treturn \u0026executableSchema{\n\t\tschema:     cfg.Schema,\n\t\tresolvers:  cfg.Resolvers,\n\t\tdirectives: cfg.Directives,\n\t\tcomplexity: cfg.Complexity,\n\t}\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"Schema","start_line":85,"end_line":90,"code":"func (e *executableSchema) Schema() *ast.Schema {\n\tif e.schema != nil {\n\t\treturn e.schema\n\t}\n\treturn parsedSchema\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"Complexity","start_line":92,"end_line":160,"code":"func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]any) (int, bool) {\n\tec := executionContext{nil, e, 0, 0, nil}\n\t_ = ec\n\tswitch typeName + \".\" + field {\n\n\tcase \"Mutation.createTodo\":\n\t\tif e.complexity.Mutation.CreateTodo == nil {\n\t\t\tbreak\n\t\t}\n\n\t\targs, err := ec.field_Mutation_createTodo_args(context.TODO(), rawArgs)\n\t\tif err != nil {\n\t\t\treturn 0, false\n\t\t}\n\n\t\treturn e.complexity.Mutation.CreateTodo(childComplexity, args[\"input\"].(model.NewTodo)), true\n\n\tcase \"Query.todos\":\n\t\tif e.complexity.Query.Todos == nil {\n\t\t\tbreak\n\t\t}\n\n\t\treturn e.complexity.Query.Todos(childComplexity), true\n\n\tcase \"Todo.done\":\n\t\tif e.complexity.Todo.Done == nil {\n\t\t\tbreak\n\t\t}\n\n\t\treturn e.complexity.Todo.Done(childComplexity), true\n\n\tcase \"Todo.id\":\n\t\tif e.complexity.Todo.ID == nil {\n\t\t\tbreak\n\t\t}\n\n\t\treturn e.complexity.Todo.ID(childComplexity), true\n\n\tcase \"Todo.text\":\n\t\tif e.complexity.Todo.Text == nil {\n\t\t\tbreak\n\t\t}\n\n\t\treturn e.complexity.Todo.Text(childComplexity), true\n\n\tcase \"Todo.user\":\n\t\tif e.complexity.Todo.User == nil {\n\t\t\tbreak\n\t\t}\n\n\t\treturn e.complexity.Todo.User(childComplexity), true\n\n\tcase \"User.id\":\n\t\tif e.complexity.User.ID == nil {\n\t\t\tbreak\n\t\t}\n\n\t\treturn e.complexity.User.ID(childComplexity), true\n\n\tcase \"User.name\":\n\t\tif e.complexity.User.Name == nil {\n\t\t\tbreak\n\t\t}\n\n\t\treturn e.complexity.User.Name(childComplexity), true\n\n\t}\n\treturn 0, false\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"Exec","start_line":162,"end_line":220,"code":"func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {\n\topCtx := graphql.GetOperationContext(ctx)\n\tec := executionContext{opCtx, e, 0, 0, make(chan graphql.DeferredResult)}\n\tinputUnmarshalMap := graphql.BuildUnmarshalerMap(\n\t\tec.unmarshalInputNewTodo,\n\t)\n\tfirst := true\n\n\tswitch opCtx.Operation.Operation {\n\tcase ast.Query:\n\t\treturn func(ctx context.Context) *graphql.Response {\n\t\t\tvar response graphql.Response\n\t\t\tvar data graphql.Marshaler\n\t\t\tif first {\n\t\t\t\tfirst = false\n\t\t\t\tctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)\n\t\t\t\tdata = ec._Query(ctx, opCtx.Operation.SelectionSet)\n\t\t\t} else {\n\t\t\t\tif atomic.LoadInt32(\u0026ec.pendingDeferred) \u003e 0 {\n\t\t\t\t\tresult := \u003c-ec.deferredResults\n\t\t\t\t\tatomic.AddInt32(\u0026ec.pendingDeferred, -1)\n\t\t\t\t\tdata = result.Result\n\t\t\t\t\tresponse.Path = result.Path\n\t\t\t\t\tresponse.Label = result.Label\n\t\t\t\t\tresponse.Errors = result.Errors\n\t\t\t\t} else {\n\t\t\t\t\treturn nil\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar buf bytes.Buffer\n\t\t\tdata.MarshalGQL(\u0026buf)\n\t\t\tresponse.Data = buf.Bytes()\n\t\t\tif atomic.LoadInt32(\u0026ec.deferred) \u003e 0 {\n\t\t\t\thasNext := atomic.LoadInt32(\u0026ec.pendingDeferred) \u003e 0\n\t\t\t\tresponse.HasNext = \u0026hasNext\n\t\t\t}\n\n\t\t\treturn \u0026response\n\t\t}\n\tcase ast.Mutation:\n\t\treturn func(ctx context.Context) *graphql.Response {\n\t\t\tif !first {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\tfirst = false\n\t\t\tctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)\n\t\t\tdata := ec._Mutation(ctx, opCtx.Operation.SelectionSet)\n\t\t\tvar buf bytes.Buffer\n\t\t\tdata.MarshalGQL(\u0026buf)\n\n\t\t\treturn \u0026graphql.Response{\n\t\t\t\tData: buf.Bytes(),\n\t\t\t}\n\t\t}\n\n\tdefault:\n\t\treturn graphql.OneShot(graphql.ErrorResponse(ctx, \"unsupported GraphQL operation\"))\n\t}\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"processDeferredGroup","start_line":230,"end_line":247,"code":"func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {\n\tatomic.AddInt32(\u0026ec.pendingDeferred, 1)\n\tgo func() {\n\t\tctx := graphql.WithFreshResponseContext(dg.Context)\n\t\tdg.FieldSet.Dispatch(ctx)\n\t\tds := graphql.DeferredResult{\n\t\t\tPath:   dg.Path,\n\t\t\tLabel:  dg.Label,\n\t\t\tResult: dg.FieldSet,\n\t\t\tErrors: graphql.GetErrors(ctx),\n\t\t}\n\t\t// null fields should bubble up\n\t\tif dg.FieldSet.Invalids \u003e 0 {\n\t\t\tds.Result = graphql.Null\n\t\t}\n\t\tec.deferredResults \u003c- ds\n\t}()\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"introspectSchema","start_line":249,"end_line":254,"code":"func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {\n\tif ec.DisableIntrospection {\n\t\treturn nil, errors.New(\"introspection disabled\")\n\t}\n\treturn introspection.WrapSchema(ec.Schema()), nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"introspectType","start_line":256,"end_line":261,"code":"func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {\n\tif ec.DisableIntrospection {\n\t\treturn nil, errors.New(\"introspection disabled\")\n\t}\n\treturn introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"sourceData","start_line":266,"end_line":272,"code":"func sourceData(filename string) string {\n\tdata, err := sourcesFS.ReadFile(filename)\n\tif err != nil {\n\t\tpanic(fmt.Sprintf(\"codegen problem: %s not available\", filename))\n\t}\n\treturn string(data)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"field_Mutation_createTodo_args","start_line":283,"end_line":292,"code":"func (ec *executionContext) field_Mutation_createTodo_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {\n\tvar err error\n\targs := map[string]any{}\n\targ0, err := ec.field_Mutation_createTodo_argsInput(ctx, rawArgs)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\targs[\"input\"] = arg0\n\treturn args, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"field_Mutation_createTodo_argsInput","start_line":293,"end_line":304,"code":"func (ec *executionContext) field_Mutation_createTodo_argsInput(\n\tctx context.Context,\n\trawArgs map[string]any,\n) (model.NewTodo, error) {\n\tctx = graphql.WithPathContext(ctx, graphql.NewPathWithField(\"input\"))\n\tif tmp, ok := rawArgs[\"input\"]; ok {\n\t\treturn ec.unmarshalNNewTodo2goforumᚋgraphᚋmodelᚐNewTodo(ctx, tmp)\n\t}\n\n\tvar zeroVal model.NewTodo\n\treturn zeroVal, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"field_Query___type_args","start_line":306,"end_line":315,"code":"func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {\n\tvar err error\n\targs := map[string]any{}\n\targ0, err := ec.field_Query___type_argsName(ctx, rawArgs)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\targs[\"name\"] = arg0\n\treturn args, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"field_Query___type_argsName","start_line":316,"end_line":327,"code":"func (ec *executionContext) field_Query___type_argsName(\n\tctx context.Context,\n\trawArgs map[string]any,\n) (string, error) {\n\tctx = graphql.WithPathContext(ctx, graphql.NewPathWithField(\"name\"))\n\tif tmp, ok := rawArgs[\"name\"]; ok {\n\t\treturn ec.unmarshalNString2string(ctx, tmp)\n\t}\n\n\tvar zeroVal string\n\treturn zeroVal, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"field___Directive_args_args","start_line":329,"end_line":338,"code":"func (ec *executionContext) field___Directive_args_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {\n\tvar err error\n\targs := map[string]any{}\n\targ0, err := ec.field___Directive_args_argsIncludeDeprecated(ctx, rawArgs)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\targs[\"includeDeprecated\"] = arg0\n\treturn args, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"field___Directive_args_argsIncludeDeprecated","start_line":339,"end_line":350,"code":"func (ec *executionContext) field___Directive_args_argsIncludeDeprecated(\n\tctx context.Context,\n\trawArgs map[string]any,\n) (*bool, error) {\n\tctx = graphql.WithPathContext(ctx, graphql.NewPathWithField(\"includeDeprecated\"))\n\tif tmp, ok := rawArgs[\"includeDeprecated\"]; ok {\n\t\treturn ec.unmarshalOBoolean2ᚖbool(ctx, tmp)\n\t}\n\n\tvar zeroVal *bool\n\treturn zeroVal, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"field___Field_args_args","start_line":352,"end_line":361,"code":"func (ec *executionContext) field___Field_args_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {\n\tvar err error\n\targs := map[string]any{}\n\targ0, err := ec.field___Field_args_argsIncludeDeprecated(ctx, rawArgs)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\targs[\"includeDeprecated\"] = arg0\n\treturn args, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"field___Field_args_argsIncludeDeprecated","start_line":362,"end_line":373,"code":"func (ec *executionContext) field___Field_args_argsIncludeDeprecated(\n\tctx context.Context,\n\trawArgs map[string]any,\n) (*bool, error) {\n\tctx = graphql.WithPathContext(ctx, graphql.NewPathWithField(\"includeDeprecated\"))\n\tif tmp, ok := rawArgs[\"includeDeprecated\"]; ok {\n\t\treturn ec.unmarshalOBoolean2ᚖbool(ctx, tmp)\n\t}\n\n\tvar zeroVal *bool\n\treturn zeroVal, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"field___Type_enumValues_args","start_line":375,"end_line":384,"code":"func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {\n\tvar err error\n\targs := map[string]any{}\n\targ0, err := ec.field___Type_enumValues_argsIncludeDeprecated(ctx, rawArgs)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\targs[\"includeDeprecated\"] = arg0\n\treturn args, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"field___Type_enumValues_argsIncludeDeprecated","start_line":385,"end_line":396,"code":"func (ec *executionContext) field___Type_enumValues_argsIncludeDeprecated(\n\tctx context.Context,\n\trawArgs map[string]any,\n) (bool, error) {\n\tctx = graphql.WithPathContext(ctx, graphql.NewPathWithField(\"includeDeprecated\"))\n\tif tmp, ok := rawArgs[\"includeDeprecated\"]; ok {\n\t\treturn ec.unmarshalOBoolean2bool(ctx, tmp)\n\t}\n\n\tvar zeroVal bool\n\treturn zeroVal, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"field___Type_fields_args","start_line":398,"end_line":407,"code":"func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {\n\tvar err error\n\targs := map[string]any{}\n\targ0, err := ec.field___Type_fields_argsIncludeDeprecated(ctx, rawArgs)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\targs[\"includeDeprecated\"] = arg0\n\treturn args, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"field___Type_fields_argsIncludeDeprecated","start_line":408,"end_line":419,"code":"func (ec *executionContext) field___Type_fields_argsIncludeDeprecated(\n\tctx context.Context,\n\trawArgs map[string]any,\n) (bool, error) {\n\tctx = graphql.WithPathContext(ctx, graphql.NewPathWithField(\"includeDeprecated\"))\n\tif tmp, ok := rawArgs[\"includeDeprecated\"]; ok {\n\t\treturn ec.unmarshalOBoolean2bool(ctx, tmp)\n\t}\n\n\tvar zeroVal bool\n\treturn zeroVal, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"_Mutation_createTodo","start_line":429,"end_line":458,"code":"func (ec *executionContext) _Mutation_createTodo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext_Mutation_createTodo(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn ec.resolvers.Mutation().CreateTodo(rctx, fc.Args[\"input\"].(model.NewTodo))\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\tif !graphql.HasFieldError(ctx, fc) {\n\t\t\tec.Errorf(ctx, \"must not be null\")\n\t\t}\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(*model.Todo)\n\tfc.Result = res\n\treturn ec.marshalNTodo2ᚖgoforumᚋgraphᚋmodelᚐTodo(ctx, field.Selections, res)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"fieldContext_Mutation_createTodo","start_line":460,"end_line":492,"code":"func (ec *executionContext) fieldContext_Mutation_createTodo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"Mutation\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: true,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\tswitch field.Name {\n\t\t\tcase \"id\":\n\t\t\t\treturn ec.fieldContext_Todo_id(ctx, field)\n\t\t\tcase \"text\":\n\t\t\t\treturn ec.fieldContext_Todo_text(ctx, field)\n\t\t\tcase \"done\":\n\t\t\t\treturn ec.fieldContext_Todo_done(ctx, field)\n\t\t\tcase \"user\":\n\t\t\t\treturn ec.fieldContext_Todo_user(ctx, field)\n\t\t\t}\n\t\t\treturn nil, fmt.Errorf(\"no field named %q was found under type Todo\", field.Name)\n\t\t},\n\t}\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\terr = ec.Recover(ctx, r)\n\t\t\tec.Error(ctx, err)\n\t\t}\n\t}()\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tif fc.Args, err = ec.field_Mutation_createTodo_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn fc, err\n\t}\n\treturn fc, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"_Query_todos","start_line":494,"end_line":523,"code":"func (ec *executionContext) _Query_todos(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext_Query_todos(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn ec.resolvers.Query().Todos(rctx)\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\tif !graphql.HasFieldError(ctx, fc) {\n\t\t\tec.Errorf(ctx, \"must not be null\")\n\t\t}\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.([]*model.Todo)\n\tfc.Result = res\n\treturn ec.marshalNTodo2ᚕᚖgoforumᚋgraphᚋmodelᚐTodoᚄ(ctx, field.Selections, res)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"fieldContext_Query_todos","start_line":525,"end_line":546,"code":"func (ec *executionContext) fieldContext_Query_todos(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"Query\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: true,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\tswitch field.Name {\n\t\t\tcase \"id\":\n\t\t\t\treturn ec.fieldContext_Todo_id(ctx, field)\n\t\t\tcase \"text\":\n\t\t\t\treturn ec.fieldContext_Todo_text(ctx, field)\n\t\t\tcase \"done\":\n\t\t\t\treturn ec.fieldContext_Todo_done(ctx, field)\n\t\t\tcase \"user\":\n\t\t\t\treturn ec.fieldContext_Todo_user(ctx, field)\n\t\t\t}\n\t\t\treturn nil, fmt.Errorf(\"no field named %q was found under type Todo\", field.Name)\n\t\t},\n\t}\n\treturn fc, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"_Query___type","start_line":548,"end_line":574,"code":"func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext_Query___type(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn ec.introspectType(fc.Args[\"name\"].(string))\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(*introspection.Type)\n\tfc.Result = res\n\treturn ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"fieldContext_Query___type","start_line":576,"end_line":622,"code":"func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"Query\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\tswitch field.Name {\n\t\t\tcase \"kind\":\n\t\t\t\treturn ec.fieldContext___Type_kind(ctx, field)\n\t\t\tcase \"name\":\n\t\t\t\treturn ec.fieldContext___Type_name(ctx, field)\n\t\t\tcase \"description\":\n\t\t\t\treturn ec.fieldContext___Type_description(ctx, field)\n\t\t\tcase \"specifiedByURL\":\n\t\t\t\treturn ec.fieldContext___Type_specifiedByURL(ctx, field)\n\t\t\tcase \"fields\":\n\t\t\t\treturn ec.fieldContext___Type_fields(ctx, field)\n\t\t\tcase \"interfaces\":\n\t\t\t\treturn ec.fieldContext___Type_interfaces(ctx, field)\n\t\t\tcase \"possibleTypes\":\n\t\t\t\treturn ec.fieldContext___Type_possibleTypes(ctx, field)\n\t\t\tcase \"enumValues\":\n\t\t\t\treturn ec.fieldContext___Type_enumValues(ctx, field)\n\t\t\tcase \"inputFields\":\n\t\t\t\treturn ec.fieldContext___Type_inputFields(ctx, field)\n\t\t\tcase \"ofType\":\n\t\t\t\treturn ec.fieldContext___Type_ofType(ctx, field)\n\t\t\tcase \"isOneOf\":\n\t\t\t\treturn ec.fieldContext___Type_isOneOf(ctx, field)\n\t\t\t}\n\t\t\treturn nil, fmt.Errorf(\"no field named %q was found under type __Type\", field.Name)\n\t\t},\n\t}\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\terr = ec.Recover(ctx, r)\n\t\t\tec.Error(ctx, err)\n\t\t}\n\t}()\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tif fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn fc, err\n\t}\n\treturn fc, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"_Query___schema","start_line":624,"end_line":650,"code":"func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext_Query___schema(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn ec.introspectSchema()\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(*introspection.Schema)\n\tfc.Result = res\n\treturn ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"fieldContext_Query___schema","start_line":652,"end_line":677,"code":"func (ec *executionContext) fieldContext_Query___schema(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"Query\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\tswitch field.Name {\n\t\t\tcase \"description\":\n\t\t\t\treturn ec.fieldContext___Schema_description(ctx, field)\n\t\t\tcase \"types\":\n\t\t\t\treturn ec.fieldContext___Schema_types(ctx, field)\n\t\t\tcase \"queryType\":\n\t\t\t\treturn ec.fieldContext___Schema_queryType(ctx, field)\n\t\t\tcase \"mutationType\":\n\t\t\t\treturn ec.fieldContext___Schema_mutationType(ctx, field)\n\t\t\tcase \"subscriptionType\":\n\t\t\t\treturn ec.fieldContext___Schema_subscriptionType(ctx, field)\n\t\t\tcase \"directives\":\n\t\t\t\treturn ec.fieldContext___Schema_directives(ctx, field)\n\t\t\t}\n\t\t\treturn nil, fmt.Errorf(\"no field named %q was found under type __Schema\", field.Name)\n\t\t},\n\t}\n\treturn fc, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"_Todo_id","start_line":679,"end_line":708,"code":"func (ec *executionContext) _Todo_id(ctx context.Context, field graphql.CollectedField, obj *model.Todo) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext_Todo_id(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.ID, nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\tif !graphql.HasFieldError(ctx, fc) {\n\t\t\tec.Errorf(ctx, \"must not be null\")\n\t\t}\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(string)\n\tfc.Result = res\n\treturn ec.marshalNID2string(ctx, field.Selections, res)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"fieldContext_Todo_id","start_line":710,"end_line":721,"code":"func (ec *executionContext) fieldContext_Todo_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"Todo\",\n\t\tField:      field,\n\t\tIsMethod:   false,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\treturn nil, errors.New(\"field of type ID does not have child fields\")\n\t\t},\n\t}\n\treturn fc, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"_Todo_text","start_line":723,"end_line":752,"code":"func (ec *executionContext) _Todo_text(ctx context.Context, field graphql.CollectedField, obj *model.Todo) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext_Todo_text(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.Text, nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\tif !graphql.HasFieldError(ctx, fc) {\n\t\t\tec.Errorf(ctx, \"must not be null\")\n\t\t}\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(string)\n\tfc.Result = res\n\treturn ec.marshalNString2string(ctx, field.Selections, res)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"fieldContext_Todo_text","start_line":754,"end_line":765,"code":"func (ec *executionContext) fieldContext_Todo_text(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"Todo\",\n\t\tField:      field,\n\t\tIsMethod:   false,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\treturn nil, errors.New(\"field of type String does not have child fields\")\n\t\t},\n\t}\n\treturn fc, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"_Todo_done","start_line":767,"end_line":796,"code":"func (ec *executionContext) _Todo_done(ctx context.Context, field graphql.CollectedField, obj *model.Todo) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext_Todo_done(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.Done, nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\tif !graphql.HasFieldError(ctx, fc) {\n\t\t\tec.Errorf(ctx, \"must not be null\")\n\t\t}\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(bool)\n\tfc.Result = res\n\treturn ec.marshalNBoolean2bool(ctx, field.Selections, res)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"fieldContext_Todo_done","start_line":798,"end_line":809,"code":"func (ec *executionContext) fieldContext_Todo_done(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"Todo\",\n\t\tField:      field,\n\t\tIsMethod:   false,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\treturn nil, errors.New(\"field of type Boolean does not have child fields\")\n\t\t},\n\t}\n\treturn fc, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"_Todo_user","start_line":811,"end_line":840,"code":"func (ec *executionContext) _Todo_user(ctx context.Context, field graphql.CollectedField, obj *model.Todo) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext_Todo_user(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.User, nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\tif !graphql.HasFieldError(ctx, fc) {\n\t\t\tec.Errorf(ctx, \"must not be null\")\n\t\t}\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(*model.User)\n\tfc.Result = res\n\treturn ec.marshalNUser2ᚖgoforumᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"fieldContext_Todo_user","start_line":842,"end_line":859,"code":"func (ec *executionContext) fieldContext_Todo_user(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"Todo\",\n\t\tField:      field,\n\t\tIsMethod:   false,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\tswitch field.Name {\n\t\t\tcase \"id\":\n\t\t\t\treturn ec.fieldContext_User_id(ctx, field)\n\t\t\tcase \"name\":\n\t\t\t\treturn ec.fieldContext_User_name(ctx, field)\n\t\t\t}\n\t\t\treturn nil, fmt.Errorf(\"no field named %q was found under type User\", field.Name)\n\t\t},\n\t}\n\treturn fc, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"_User_id","start_line":861,"end_line":890,"code":"func (ec *executionContext) _User_id(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext_User_id(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.ID, nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\tif !graphql.HasFieldError(ctx, fc) {\n\t\t\tec.Errorf(ctx, \"must not be null\")\n\t\t}\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(string)\n\tfc.Result = res\n\treturn ec.marshalNID2string(ctx, field.Selections, res)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"fieldContext_User_id","start_line":892,"end_line":903,"code":"func (ec *executionContext) fieldContext_User_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"User\",\n\t\tField:      field,\n\t\tIsMethod:   false,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\treturn nil, errors.New(\"field of type ID does not have child fields\")\n\t\t},\n\t}\n\treturn fc, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"_User_name","start_line":905,"end_line":934,"code":"func (ec *executionContext) _User_name(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext_User_name(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.Name, nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\tif !graphql.HasFieldError(ctx, fc) {\n\t\t\tec.Errorf(ctx, \"must not be null\")\n\t\t}\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(string)\n\tfc.Result = res\n\treturn ec.marshalNString2string(ctx, field.Selections, res)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"fieldContext_User_name","start_line":936,"end_line":947,"code":"func (ec *executionContext) fieldContext_User_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"User\",\n\t\tField:      field,\n\t\tIsMethod:   false,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\treturn nil, errors.New(\"field of type String does not have child fields\")\n\t\t},\n\t}\n\treturn fc, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"___Directive_name","start_line":949,"end_line":978,"code":"func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___Directive_name(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.Name, nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\tif !graphql.HasFieldError(ctx, fc) {\n\t\t\tec.Errorf(ctx, \"must not be null\")\n\t\t}\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(string)\n\tfc.Result = res\n\treturn ec.marshalNString2string(ctx, field.Selections, res)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"fieldContext___Directive_name","start_line":980,"end_line":991,"code":"func (ec *executionContext) fieldContext___Directive_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__Directive\",\n\t\tField:      field,\n\t\tIsMethod:   false,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\treturn nil, errors.New(\"field of type String does not have child fields\")\n\t\t},\n\t}\n\treturn fc, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"___Directive_description","start_line":993,"end_line":1019,"code":"func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___Directive_description(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.Description(), nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(*string)\n\tfc.Result = res\n\treturn ec.marshalOString2ᚖstring(ctx, field.Selections, res)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"fieldContext___Directive_description","start_line":1021,"end_line":1032,"code":"func (ec *executionContext) fieldContext___Directive_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__Directive\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\treturn nil, errors.New(\"field of type String does not have child fields\")\n\t\t},\n\t}\n\treturn fc, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"___Directive_isRepeatable","start_line":1034,"end_line":1063,"code":"func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.IsRepeatable, nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\tif !graphql.HasFieldError(ctx, fc) {\n\t\t\tec.Errorf(ctx, \"must not be null\")\n\t\t}\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(bool)\n\tfc.Result = res\n\treturn ec.marshalNBoolean2bool(ctx, field.Selections, res)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"fieldContext___Directive_isRepeatable","start_line":1065,"end_line":1076,"code":"func (ec *executionContext) fieldContext___Directive_isRepeatable(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__Directive\",\n\t\tField:      field,\n\t\tIsMethod:   false,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\treturn nil, errors.New(\"field of type Boolean does not have child fields\")\n\t\t},\n\t}\n\treturn fc, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"___Directive_locations","start_line":1078,"end_line":1107,"code":"func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___Directive_locations(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.Locations, nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\tif !graphql.HasFieldError(ctx, fc) {\n\t\t\tec.Errorf(ctx, \"must not be null\")\n\t\t}\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.([]string)\n\tfc.Result = res\n\treturn ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"fieldContext___Directive_locations","start_line":1109,"end_line":1120,"code":"func (ec *executionContext) fieldContext___Directive_locations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__Directive\",\n\t\tField:      field,\n\t\tIsMethod:   false,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\treturn nil, errors.New(\"field of type __DirectiveLocation does not have child fields\")\n\t\t},\n\t}\n\treturn fc, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"___Directive_args","start_line":1122,"end_line":1151,"code":"func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___Directive_args(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.Args, nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\tif !graphql.HasFieldError(ctx, fc) {\n\t\t\tec.Errorf(ctx, \"must not be null\")\n\t\t}\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.([]introspection.InputValue)\n\tfc.Result = res\n\treturn ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"fieldContext___Directive_args","start_line":1153,"end_line":1189,"code":"func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__Directive\",\n\t\tField:      field,\n\t\tIsMethod:   false,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\tswitch field.Name {\n\t\t\tcase \"name\":\n\t\t\t\treturn ec.fieldContext___InputValue_name(ctx, field)\n\t\t\tcase \"description\":\n\t\t\t\treturn ec.fieldContext___InputValue_description(ctx, field)\n\t\t\tcase \"type\":\n\t\t\t\treturn ec.fieldContext___InputValue_type(ctx, field)\n\t\t\tcase \"defaultValue\":\n\t\t\t\treturn ec.fieldContext___InputValue_defaultValue(ctx, field)\n\t\t\tcase \"isDeprecated\":\n\t\t\t\treturn ec.fieldContext___InputValue_isDeprecated(ctx, field)\n\t\t\tcase \"deprecationReason\":\n\t\t\t\treturn ec.fieldContext___InputValue_deprecationReason(ctx, field)\n\t\t\t}\n\t\t\treturn nil, fmt.Errorf(\"no field named %q was found under type __InputValue\", field.Name)\n\t\t},\n\t}\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\terr = ec.Recover(ctx, r)\n\t\t\tec.Error(ctx, err)\n\t\t}\n\t}()\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tif fc.Args, err = ec.field___Directive_args_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn fc, err\n\t}\n\treturn fc, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"___EnumValue_name","start_line":1191,"end_line":1220,"code":"func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___EnumValue_name(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.Name, nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\tif !graphql.HasFieldError(ctx, fc) {\n\t\t\tec.Errorf(ctx, \"must not be null\")\n\t\t}\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(string)\n\tfc.Result = res\n\treturn ec.marshalNString2string(ctx, field.Selections, res)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"fieldContext___EnumValue_name","start_line":1222,"end_line":1233,"code":"func (ec *executionContext) fieldContext___EnumValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__EnumValue\",\n\t\tField:      field,\n\t\tIsMethod:   false,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\treturn nil, errors.New(\"field of type String does not have child fields\")\n\t\t},\n\t}\n\treturn fc, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"___EnumValue_description","start_line":1235,"end_line":1261,"code":"func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___EnumValue_description(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.Description(), nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(*string)\n\tfc.Result = res\n\treturn ec.marshalOString2ᚖstring(ctx, field.Selections, res)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"fieldContext___EnumValue_description","start_line":1263,"end_line":1274,"code":"func (ec *executionContext) fieldContext___EnumValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__EnumValue\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\treturn nil, errors.New(\"field of type String does not have child fields\")\n\t\t},\n\t}\n\treturn fc, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"___EnumValue_isDeprecated","start_line":1276,"end_line":1305,"code":"func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.IsDeprecated(), nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\tif !graphql.HasFieldError(ctx, fc) {\n\t\t\tec.Errorf(ctx, \"must not be null\")\n\t\t}\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(bool)\n\tfc.Result = res\n\treturn ec.marshalNBoolean2bool(ctx, field.Selections, res)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"fieldContext___EnumValue_isDeprecated","start_line":1307,"end_line":1318,"code":"func (ec *executionContext) fieldContext___EnumValue_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__EnumValue\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\treturn nil, errors.New(\"field of type Boolean does not have child fields\")\n\t\t},\n\t}\n\treturn fc, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"___EnumValue_deprecationReason","start_line":1320,"end_line":1346,"code":"func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.DeprecationReason(), nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(*string)\n\tfc.Result = res\n\treturn ec.marshalOString2ᚖstring(ctx, field.Selections, res)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"fieldContext___EnumValue_deprecationReason","start_line":1348,"end_line":1359,"code":"func (ec *executionContext) fieldContext___EnumValue_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__EnumValue\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\treturn nil, errors.New(\"field of type String does not have child fields\")\n\t\t},\n\t}\n\treturn fc, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"___Field_name","start_line":1361,"end_line":1390,"code":"func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___Field_name(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.Name, nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\tif !graphql.HasFieldError(ctx, fc) {\n\t\t\tec.Errorf(ctx, \"must not be null\")\n\t\t}\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(string)\n\tfc.Result = res\n\treturn ec.marshalNString2string(ctx, field.Selections, res)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"fieldContext___Field_name","start_line":1392,"end_line":1403,"code":"func (ec *executionContext) fieldContext___Field_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__Field\",\n\t\tField:      field,\n\t\tIsMethod:   false,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\treturn nil, errors.New(\"field of type String does not have child fields\")\n\t\t},\n\t}\n\treturn fc, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"___Field_description","start_line":1405,"end_line":1431,"code":"func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___Field_description(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.Description(), nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(*string)\n\tfc.Result = res\n\treturn ec.marshalOString2ᚖstring(ctx, field.Selections, res)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"fieldContext___Field_description","start_line":1433,"end_line":1444,"code":"func (ec *executionContext) fieldContext___Field_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__Field\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\treturn nil, errors.New(\"field of type String does not have child fields\")\n\t\t},\n\t}\n\treturn fc, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"___Field_args","start_line":1446,"end_line":1475,"code":"func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___Field_args(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.Args, nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\tif !graphql.HasFieldError(ctx, fc) {\n\t\t\tec.Errorf(ctx, \"must not be null\")\n\t\t}\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.([]introspection.InputValue)\n\tfc.Result = res\n\treturn ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"fieldContext___Field_args","start_line":1477,"end_line":1513,"code":"func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__Field\",\n\t\tField:      field,\n\t\tIsMethod:   false,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\tswitch field.Name {\n\t\t\tcase \"name\":\n\t\t\t\treturn ec.fieldContext___InputValue_name(ctx, field)\n\t\t\tcase \"description\":\n\t\t\t\treturn ec.fieldContext___InputValue_description(ctx, field)\n\t\t\tcase \"type\":\n\t\t\t\treturn ec.fieldContext___InputValue_type(ctx, field)\n\t\t\tcase \"defaultValue\":\n\t\t\t\treturn ec.fieldContext___InputValue_defaultValue(ctx, field)\n\t\t\tcase \"isDeprecated\":\n\t\t\t\treturn ec.fieldContext___InputValue_isDeprecated(ctx, field)\n\t\t\tcase \"deprecationReason\":\n\t\t\t\treturn ec.fieldContext___InputValue_deprecationReason(ctx, field)\n\t\t\t}\n\t\t\treturn nil, fmt.Errorf(\"no field named %q was found under type __InputValue\", field.Name)\n\t\t},\n\t}\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\terr = ec.Recover(ctx, r)\n\t\t\tec.Error(ctx, err)\n\t\t}\n\t}()\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tif fc.Args, err = ec.field___Field_args_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn fc, err\n\t}\n\treturn fc, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"___Field_type","start_line":1515,"end_line":1544,"code":"func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___Field_type(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.Type, nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\tif !graphql.HasFieldError(ctx, fc) {\n\t\t\tec.Errorf(ctx, \"must not be null\")\n\t\t}\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(*introspection.Type)\n\tfc.Result = res\n\treturn ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"fieldContext___Field_type","start_line":1546,"end_line":1581,"code":"func (ec *executionContext) fieldContext___Field_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__Field\",\n\t\tField:      field,\n\t\tIsMethod:   false,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\tswitch field.Name {\n\t\t\tcase \"kind\":\n\t\t\t\treturn ec.fieldContext___Type_kind(ctx, field)\n\t\t\tcase \"name\":\n\t\t\t\treturn ec.fieldContext___Type_name(ctx, field)\n\t\t\tcase \"description\":\n\t\t\t\treturn ec.fieldContext___Type_description(ctx, field)\n\t\t\tcase \"specifiedByURL\":\n\t\t\t\treturn ec.fieldContext___Type_specifiedByURL(ctx, field)\n\t\t\tcase \"fields\":\n\t\t\t\treturn ec.fieldContext___Type_fields(ctx, field)\n\t\t\tcase \"interfaces\":\n\t\t\t\treturn ec.fieldContext___Type_interfaces(ctx, field)\n\t\t\tcase \"possibleTypes\":\n\t\t\t\treturn ec.fieldContext___Type_possibleTypes(ctx, field)\n\t\t\tcase \"enumValues\":\n\t\t\t\treturn ec.fieldContext___Type_enumValues(ctx, field)\n\t\t\tcase \"inputFields\":\n\t\t\t\treturn ec.fieldContext___Type_inputFields(ctx, field)\n\t\t\tcase \"ofType\":\n\t\t\t\treturn ec.fieldContext___Type_ofType(ctx, field)\n\t\t\tcase \"isOneOf\":\n\t\t\t\treturn ec.fieldContext___Type_isOneOf(ctx, field)\n\t\t\t}\n\t\t\treturn nil, fmt.Errorf(\"no field named %q was found under type __Type\", field.Name)\n\t\t},\n\t}\n\treturn fc, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"___Field_isDeprecated","start_line":1583,"end_line":1612,"code":"func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___Field_isDeprecated(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.IsDeprecated(), nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\tif !graphql.HasFieldError(ctx, fc) {\n\t\t\tec.Errorf(ctx, \"must not be null\")\n\t\t}\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(bool)\n\tfc.Result = res\n\treturn ec.marshalNBoolean2bool(ctx, field.Selections, res)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"fieldContext___Field_isDeprecated","start_line":1614,"end_line":1625,"code":"func (ec *executionContext) fieldContext___Field_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__Field\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\treturn nil, errors.New(\"field of type Boolean does not have child fields\")\n\t\t},\n\t}\n\treturn fc, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"___Field_deprecationReason","start_line":1627,"end_line":1653,"code":"func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___Field_deprecationReason(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.DeprecationReason(), nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(*string)\n\tfc.Result = res\n\treturn ec.marshalOString2ᚖstring(ctx, field.Selections, res)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"fieldContext___Field_deprecationReason","start_line":1655,"end_line":1666,"code":"func (ec *executionContext) fieldContext___Field_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__Field\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\treturn nil, errors.New(\"field of type String does not have child fields\")\n\t\t},\n\t}\n\treturn fc, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"___InputValue_name","start_line":1668,"end_line":1697,"code":"func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___InputValue_name(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.Name, nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\tif !graphql.HasFieldError(ctx, fc) {\n\t\t\tec.Errorf(ctx, \"must not be null\")\n\t\t}\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(string)\n\tfc.Result = res\n\treturn ec.marshalNString2string(ctx, field.Selections, res)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"fieldContext___InputValue_name","start_line":1699,"end_line":1710,"code":"func (ec *executionContext) fieldContext___InputValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__InputValue\",\n\t\tField:      field,\n\t\tIsMethod:   false,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\treturn nil, errors.New(\"field of type String does not have child fields\")\n\t\t},\n\t}\n\treturn fc, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"___InputValue_description","start_line":1712,"end_line":1738,"code":"func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___InputValue_description(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.Description(), nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(*string)\n\tfc.Result = res\n\treturn ec.marshalOString2ᚖstring(ctx, field.Selections, res)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"fieldContext___InputValue_description","start_line":1740,"end_line":1751,"code":"func (ec *executionContext) fieldContext___InputValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__InputValue\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\treturn nil, errors.New(\"field of type String does not have child fields\")\n\t\t},\n\t}\n\treturn fc, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"___InputValue_type","start_line":1753,"end_line":1782,"code":"func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___InputValue_type(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.Type, nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\tif !graphql.HasFieldError(ctx, fc) {\n\t\t\tec.Errorf(ctx, \"must not be null\")\n\t\t}\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(*introspection.Type)\n\tfc.Result = res\n\treturn ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"fieldContext___InputValue_type","start_line":1784,"end_line":1819,"code":"func (ec *executionContext) fieldContext___InputValue_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__InputValue\",\n\t\tField:      field,\n\t\tIsMethod:   false,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\tswitch field.Name {\n\t\t\tcase \"kind\":\n\t\t\t\treturn ec.fieldContext___Type_kind(ctx, field)\n\t\t\tcase \"name\":\n\t\t\t\treturn ec.fieldContext___Type_name(ctx, field)\n\t\t\tcase \"description\":\n\t\t\t\treturn ec.fieldContext___Type_description(ctx, field)\n\t\t\tcase \"specifiedByURL\":\n\t\t\t\treturn ec.fieldContext___Type_specifiedByURL(ctx, field)\n\t\t\tcase \"fields\":\n\t\t\t\treturn ec.fieldContext___Type_fields(ctx, field)\n\t\t\tcase \"interfaces\":\n\t\t\t\treturn ec.fieldContext___Type_interfaces(ctx, field)\n\t\t\tcase \"possibleTypes\":\n\t\t\t\treturn ec.fieldContext___Type_possibleTypes(ctx, field)\n\t\t\tcase \"enumValues\":\n\t\t\t\treturn ec.fieldContext___Type_enumValues(ctx, field)\n\t\t\tcase \"inputFields\":\n\t\t\t\treturn ec.fieldContext___Type_inputFields(ctx, field)\n\t\t\tcase \"ofType\":\n\t\t\t\treturn ec.fieldContext___Type_ofType(ctx, field)\n\t\t\tcase \"isOneOf\":\n\t\t\t\treturn ec.fieldContext___Type_isOneOf(ctx, field)\n\t\t\t}\n\t\t\treturn nil, fmt.Errorf(\"no field named %q was found under type __Type\", field.Name)\n\t\t},\n\t}\n\treturn fc, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"___InputValue_defaultValue","start_line":1821,"end_line":1847,"code":"func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.DefaultValue, nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(*string)\n\tfc.Result = res\n\treturn ec.marshalOString2ᚖstring(ctx, field.Selections, res)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"fieldContext___InputValue_defaultValue","start_line":1849,"end_line":1860,"code":"func (ec *executionContext) fieldContext___InputValue_defaultValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__InputValue\",\n\t\tField:      field,\n\t\tIsMethod:   false,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\treturn nil, errors.New(\"field of type String does not have child fields\")\n\t\t},\n\t}\n\treturn fc, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"___InputValue_isDeprecated","start_line":1862,"end_line":1891,"code":"func (ec *executionContext) ___InputValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___InputValue_isDeprecated(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.IsDeprecated(), nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\tif !graphql.HasFieldError(ctx, fc) {\n\t\t\tec.Errorf(ctx, \"must not be null\")\n\t\t}\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(bool)\n\tfc.Result = res\n\treturn ec.marshalNBoolean2bool(ctx, field.Selections, res)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"fieldContext___InputValue_isDeprecated","start_line":1893,"end_line":1904,"code":"func (ec *executionContext) fieldContext___InputValue_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__InputValue\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\treturn nil, errors.New(\"field of type Boolean does not have child fields\")\n\t\t},\n\t}\n\treturn fc, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"___InputValue_deprecationReason","start_line":1906,"end_line":1932,"code":"func (ec *executionContext) ___InputValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___InputValue_deprecationReason(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.DeprecationReason(), nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(*string)\n\tfc.Result = res\n\treturn ec.marshalOString2ᚖstring(ctx, field.Selections, res)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"fieldContext___InputValue_deprecationReason","start_line":1934,"end_line":1945,"code":"func (ec *executionContext) fieldContext___InputValue_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__InputValue\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\treturn nil, errors.New(\"field of type String does not have child fields\")\n\t\t},\n\t}\n\treturn fc, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"___Schema_description","start_line":1947,"end_line":1973,"code":"func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___Schema_description(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.Description(), nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(*string)\n\tfc.Result = res\n\treturn ec.marshalOString2ᚖstring(ctx, field.Selections, res)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"fieldContext___Schema_description","start_line":1975,"end_line":1986,"code":"func (ec *executionContext) fieldContext___Schema_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__Schema\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\treturn nil, errors.New(\"field of type String does not have child fields\")\n\t\t},\n\t}\n\treturn fc, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"___Schema_types","start_line":1988,"end_line":2017,"code":"func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___Schema_types(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.Types(), nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\tif !graphql.HasFieldError(ctx, fc) {\n\t\t\tec.Errorf(ctx, \"must not be null\")\n\t\t}\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.([]introspection.Type)\n\tfc.Result = res\n\treturn ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"fieldContext___Schema_types","start_line":2019,"end_line":2054,"code":"func (ec *executionContext) fieldContext___Schema_types(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__Schema\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\tswitch field.Name {\n\t\t\tcase \"kind\":\n\t\t\t\treturn ec.fieldContext___Type_kind(ctx, field)\n\t\t\tcase \"name\":\n\t\t\t\treturn ec.fieldContext___Type_name(ctx, field)\n\t\t\tcase \"description\":\n\t\t\t\treturn ec.fieldContext___Type_description(ctx, field)\n\t\t\tcase \"specifiedByURL\":\n\t\t\t\treturn ec.fieldContext___Type_specifiedByURL(ctx, field)\n\t\t\tcase \"fields\":\n\t\t\t\treturn ec.fieldContext___Type_fields(ctx, field)\n\t\t\tcase \"interfaces\":\n\t\t\t\treturn ec.fieldContext___Type_interfaces(ctx, field)\n\t\t\tcase \"possibleTypes\":\n\t\t\t\treturn ec.fieldContext___Type_possibleTypes(ctx, field)\n\t\t\tcase \"enumValues\":\n\t\t\t\treturn ec.fieldContext___Type_enumValues(ctx, field)\n\t\t\tcase \"inputFields\":\n\t\t\t\treturn ec.fieldContext___Type_inputFields(ctx, field)\n\t\t\tcase \"ofType\":\n\t\t\t\treturn ec.fieldContext___Type_ofType(ctx, field)\n\t\t\tcase \"isOneOf\":\n\t\t\t\treturn ec.fieldContext___Type_isOneOf(ctx, field)\n\t\t\t}\n\t\t\treturn nil, fmt.Errorf(\"no field named %q was found under type __Type\", field.Name)\n\t\t},\n\t}\n\treturn fc, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"___Schema_queryType","start_line":2056,"end_line":2085,"code":"func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___Schema_queryType(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.QueryType(), nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\tif !graphql.HasFieldError(ctx, fc) {\n\t\t\tec.Errorf(ctx, \"must not be null\")\n\t\t}\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(*introspection.Type)\n\tfc.Result = res\n\treturn ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"fieldContext___Schema_queryType","start_line":2087,"end_line":2122,"code":"func (ec *executionContext) fieldContext___Schema_queryType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__Schema\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\tswitch field.Name {\n\t\t\tcase \"kind\":\n\t\t\t\treturn ec.fieldContext___Type_kind(ctx, field)\n\t\t\tcase \"name\":\n\t\t\t\treturn ec.fieldContext___Type_name(ctx, field)\n\t\t\tcase \"description\":\n\t\t\t\treturn ec.fieldContext___Type_description(ctx, field)\n\t\t\tcase \"specifiedByURL\":\n\t\t\t\treturn ec.fieldContext___Type_specifiedByURL(ctx, field)\n\t\t\tcase \"fields\":\n\t\t\t\treturn ec.fieldContext___Type_fields(ctx, field)\n\t\t\tcase \"interfaces\":\n\t\t\t\treturn ec.fieldContext___Type_interfaces(ctx, field)\n\t\t\tcase \"possibleTypes\":\n\t\t\t\treturn ec.fieldContext___Type_possibleTypes(ctx, field)\n\t\t\tcase \"enumValues\":\n\t\t\t\treturn ec.fieldContext___Type_enumValues(ctx, field)\n\t\t\tcase \"inputFields\":\n\t\t\t\treturn ec.fieldContext___Type_inputFields(ctx, field)\n\t\t\tcase \"ofType\":\n\t\t\t\treturn ec.fieldContext___Type_ofType(ctx, field)\n\t\t\tcase \"isOneOf\":\n\t\t\t\treturn ec.fieldContext___Type_isOneOf(ctx, field)\n\t\t\t}\n\t\t\treturn nil, fmt.Errorf(\"no field named %q was found under type __Type\", field.Name)\n\t\t},\n\t}\n\treturn fc, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"___Schema_mutationType","start_line":2124,"end_line":2150,"code":"func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___Schema_mutationType(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.MutationType(), nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(*introspection.Type)\n\tfc.Result = res\n\treturn ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"fieldContext___Schema_mutationType","start_line":2152,"end_line":2187,"code":"func (ec *executionContext) fieldContext___Schema_mutationType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__Schema\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\tswitch field.Name {\n\t\t\tcase \"kind\":\n\t\t\t\treturn ec.fieldContext___Type_kind(ctx, field)\n\t\t\tcase \"name\":\n\t\t\t\treturn ec.fieldContext___Type_name(ctx, field)\n\t\t\tcase \"description\":\n\t\t\t\treturn ec.fieldContext___Type_description(ctx, field)\n\t\t\tcase \"specifiedByURL\":\n\t\t\t\treturn ec.fieldContext___Type_specifiedByURL(ctx, field)\n\t\t\tcase \"fields\":\n\t\t\t\treturn ec.fieldContext___Type_fields(ctx, field)\n\t\t\tcase \"interfaces\":\n\t\t\t\treturn ec.fieldContext___Type_interfaces(ctx, field)\n\t\t\tcase \"possibleTypes\":\n\t\t\t\treturn ec.fieldContext___Type_possibleTypes(ctx, field)\n\t\t\tcase \"enumValues\":\n\t\t\t\treturn ec.fieldContext___Type_enumValues(ctx, field)\n\t\t\tcase \"inputFields\":\n\t\t\t\treturn ec.fieldContext___Type_inputFields(ctx, field)\n\t\t\tcase \"ofType\":\n\t\t\t\treturn ec.fieldContext___Type_ofType(ctx, field)\n\t\t\tcase \"isOneOf\":\n\t\t\t\treturn ec.fieldContext___Type_isOneOf(ctx, field)\n\t\t\t}\n\t\t\treturn nil, fmt.Errorf(\"no field named %q was found under type __Type\", field.Name)\n\t\t},\n\t}\n\treturn fc, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"___Schema_subscriptionType","start_line":2189,"end_line":2215,"code":"func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.SubscriptionType(), nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(*introspection.Type)\n\tfc.Result = res\n\treturn ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"fieldContext___Schema_subscriptionType","start_line":2217,"end_line":2252,"code":"func (ec *executionContext) fieldContext___Schema_subscriptionType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__Schema\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\tswitch field.Name {\n\t\t\tcase \"kind\":\n\t\t\t\treturn ec.fieldContext___Type_kind(ctx, field)\n\t\t\tcase \"name\":\n\t\t\t\treturn ec.fieldContext___Type_name(ctx, field)\n\t\t\tcase \"description\":\n\t\t\t\treturn ec.fieldContext___Type_description(ctx, field)\n\t\t\tcase \"specifiedByURL\":\n\t\t\t\treturn ec.fieldContext___Type_specifiedByURL(ctx, field)\n\t\t\tcase \"fields\":\n\t\t\t\treturn ec.fieldContext___Type_fields(ctx, field)\n\t\t\tcase \"interfaces\":\n\t\t\t\treturn ec.fieldContext___Type_interfaces(ctx, field)\n\t\t\tcase \"possibleTypes\":\n\t\t\t\treturn ec.fieldContext___Type_possibleTypes(ctx, field)\n\t\t\tcase \"enumValues\":\n\t\t\t\treturn ec.fieldContext___Type_enumValues(ctx, field)\n\t\t\tcase \"inputFields\":\n\t\t\t\treturn ec.fieldContext___Type_inputFields(ctx, field)\n\t\t\tcase \"ofType\":\n\t\t\t\treturn ec.fieldContext___Type_ofType(ctx, field)\n\t\t\tcase \"isOneOf\":\n\t\t\t\treturn ec.fieldContext___Type_isOneOf(ctx, field)\n\t\t\t}\n\t\t\treturn nil, fmt.Errorf(\"no field named %q was found under type __Type\", field.Name)\n\t\t},\n\t}\n\treturn fc, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"___Schema_directives","start_line":2254,"end_line":2283,"code":"func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___Schema_directives(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.Directives(), nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\tif !graphql.HasFieldError(ctx, fc) {\n\t\t\tec.Errorf(ctx, \"must not be null\")\n\t\t}\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.([]introspection.Directive)\n\tfc.Result = res\n\treturn ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"fieldContext___Schema_directives","start_line":2285,"end_line":2308,"code":"func (ec *executionContext) fieldContext___Schema_directives(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__Schema\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\tswitch field.Name {\n\t\t\tcase \"name\":\n\t\t\t\treturn ec.fieldContext___Directive_name(ctx, field)\n\t\t\tcase \"description\":\n\t\t\t\treturn ec.fieldContext___Directive_description(ctx, field)\n\t\t\tcase \"isRepeatable\":\n\t\t\t\treturn ec.fieldContext___Directive_isRepeatable(ctx, field)\n\t\t\tcase \"locations\":\n\t\t\t\treturn ec.fieldContext___Directive_locations(ctx, field)\n\t\t\tcase \"args\":\n\t\t\t\treturn ec.fieldContext___Directive_args(ctx, field)\n\t\t\t}\n\t\t\treturn nil, fmt.Errorf(\"no field named %q was found under type __Directive\", field.Name)\n\t\t},\n\t}\n\treturn fc, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"___Type_kind","start_line":2310,"end_line":2339,"code":"func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___Type_kind(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.Kind(), nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\tif !graphql.HasFieldError(ctx, fc) {\n\t\t\tec.Errorf(ctx, \"must not be null\")\n\t\t}\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(string)\n\tfc.Result = res\n\treturn ec.marshalN__TypeKind2string(ctx, field.Selections, res)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"fieldContext___Type_kind","start_line":2341,"end_line":2352,"code":"func (ec *executionContext) fieldContext___Type_kind(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__Type\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\treturn nil, errors.New(\"field of type __TypeKind does not have child fields\")\n\t\t},\n\t}\n\treturn fc, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"___Type_name","start_line":2354,"end_line":2380,"code":"func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___Type_name(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.Name(), nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(*string)\n\tfc.Result = res\n\treturn ec.marshalOString2ᚖstring(ctx, field.Selections, res)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"fieldContext___Type_name","start_line":2382,"end_line":2393,"code":"func (ec *executionContext) fieldContext___Type_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__Type\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\treturn nil, errors.New(\"field of type String does not have child fields\")\n\t\t},\n\t}\n\treturn fc, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"___Type_description","start_line":2395,"end_line":2421,"code":"func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___Type_description(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.Description(), nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(*string)\n\tfc.Result = res\n\treturn ec.marshalOString2ᚖstring(ctx, field.Selections, res)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"fieldContext___Type_description","start_line":2423,"end_line":2434,"code":"func (ec *executionContext) fieldContext___Type_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__Type\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\treturn nil, errors.New(\"field of type String does not have child fields\")\n\t\t},\n\t}\n\treturn fc, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"___Type_specifiedByURL","start_line":2436,"end_line":2462,"code":"func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.SpecifiedByURL(), nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(*string)\n\tfc.Result = res\n\treturn ec.marshalOString2ᚖstring(ctx, field.Selections, res)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"fieldContext___Type_specifiedByURL","start_line":2464,"end_line":2475,"code":"func (ec *executionContext) fieldContext___Type_specifiedByURL(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__Type\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\treturn nil, errors.New(\"field of type String does not have child fields\")\n\t\t},\n\t}\n\treturn fc, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"___Type_fields","start_line":2477,"end_line":2503,"code":"func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___Type_fields(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.Fields(fc.Args[\"includeDeprecated\"].(bool)), nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.([]introspection.Field)\n\tfc.Result = res\n\treturn ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"fieldContext___Type_fields","start_line":2505,"end_line":2541,"code":"func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__Type\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\tswitch field.Name {\n\t\t\tcase \"name\":\n\t\t\t\treturn ec.fieldContext___Field_name(ctx, field)\n\t\t\tcase \"description\":\n\t\t\t\treturn ec.fieldContext___Field_description(ctx, field)\n\t\t\tcase \"args\":\n\t\t\t\treturn ec.fieldContext___Field_args(ctx, field)\n\t\t\tcase \"type\":\n\t\t\t\treturn ec.fieldContext___Field_type(ctx, field)\n\t\t\tcase \"isDeprecated\":\n\t\t\t\treturn ec.fieldContext___Field_isDeprecated(ctx, field)\n\t\t\tcase \"deprecationReason\":\n\t\t\t\treturn ec.fieldContext___Field_deprecationReason(ctx, field)\n\t\t\t}\n\t\t\treturn nil, fmt.Errorf(\"no field named %q was found under type __Field\", field.Name)\n\t\t},\n\t}\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\terr = ec.Recover(ctx, r)\n\t\t\tec.Error(ctx, err)\n\t\t}\n\t}()\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tif fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn fc, err\n\t}\n\treturn fc, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"___Type_interfaces","start_line":2543,"end_line":2569,"code":"func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___Type_interfaces(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.Interfaces(), nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.([]introspection.Type)\n\tfc.Result = res\n\treturn ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"fieldContext___Type_interfaces","start_line":2571,"end_line":2606,"code":"func (ec *executionContext) fieldContext___Type_interfaces(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__Type\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\tswitch field.Name {\n\t\t\tcase \"kind\":\n\t\t\t\treturn ec.fieldContext___Type_kind(ctx, field)\n\t\t\tcase \"name\":\n\t\t\t\treturn ec.fieldContext___Type_name(ctx, field)\n\t\t\tcase \"description\":\n\t\t\t\treturn ec.fieldContext___Type_description(ctx, field)\n\t\t\tcase \"specifiedByURL\":\n\t\t\t\treturn ec.fieldContext___Type_specifiedByURL(ctx, field)\n\t\t\tcase \"fields\":\n\t\t\t\treturn ec.fieldContext___Type_fields(ctx, field)\n\t\t\tcase \"interfaces\":\n\t\t\t\treturn ec.fieldContext___Type_interfaces(ctx, field)\n\t\t\tcase \"possibleTypes\":\n\t\t\t\treturn ec.fieldContext___Type_possibleTypes(ctx, field)\n\t\t\tcase \"enumValues\":\n\t\t\t\treturn ec.fieldContext___Type_enumValues(ctx, field)\n\t\t\tcase \"inputFields\":\n\t\t\t\treturn ec.fieldContext___Type_inputFields(ctx, field)\n\t\t\tcase \"ofType\":\n\t\t\t\treturn ec.fieldContext___Type_ofType(ctx, field)\n\t\t\tcase \"isOneOf\":\n\t\t\t\treturn ec.fieldContext___Type_isOneOf(ctx, field)\n\t\t\t}\n\t\t\treturn nil, fmt.Errorf(\"no field named %q was found under type __Type\", field.Name)\n\t\t},\n\t}\n\treturn fc, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"___Type_possibleTypes","start_line":2608,"end_line":2634,"code":"func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___Type_possibleTypes(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.PossibleTypes(), nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.([]introspection.Type)\n\tfc.Result = res\n\treturn ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"fieldContext___Type_possibleTypes","start_line":2636,"end_line":2671,"code":"func (ec *executionContext) fieldContext___Type_possibleTypes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__Type\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\tswitch field.Name {\n\t\t\tcase \"kind\":\n\t\t\t\treturn ec.fieldContext___Type_kind(ctx, field)\n\t\t\tcase \"name\":\n\t\t\t\treturn ec.fieldContext___Type_name(ctx, field)\n\t\t\tcase \"description\":\n\t\t\t\treturn ec.fieldContext___Type_description(ctx, field)\n\t\t\tcase \"specifiedByURL\":\n\t\t\t\treturn ec.fieldContext___Type_specifiedByURL(ctx, field)\n\t\t\tcase \"fields\":\n\t\t\t\treturn ec.fieldContext___Type_fields(ctx, field)\n\t\t\tcase \"interfaces\":\n\t\t\t\treturn ec.fieldContext___Type_interfaces(ctx, field)\n\t\t\tcase \"possibleTypes\":\n\t\t\t\treturn ec.fieldContext___Type_possibleTypes(ctx, field)\n\t\t\tcase \"enumValues\":\n\t\t\t\treturn ec.fieldContext___Type_enumValues(ctx, field)\n\t\t\tcase \"inputFields\":\n\t\t\t\treturn ec.fieldContext___Type_inputFields(ctx, field)\n\t\t\tcase \"ofType\":\n\t\t\t\treturn ec.fieldContext___Type_ofType(ctx, field)\n\t\t\tcase \"isOneOf\":\n\t\t\t\treturn ec.fieldContext___Type_isOneOf(ctx, field)\n\t\t\t}\n\t\t\treturn nil, fmt.Errorf(\"no field named %q was found under type __Type\", field.Name)\n\t\t},\n\t}\n\treturn fc, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"___Type_enumValues","start_line":2673,"end_line":2699,"code":"func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___Type_enumValues(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.EnumValues(fc.Args[\"includeDeprecated\"].(bool)), nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.([]introspection.EnumValue)\n\tfc.Result = res\n\treturn ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"fieldContext___Type_enumValues","start_line":2701,"end_line":2733,"code":"func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__Type\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\tswitch field.Name {\n\t\t\tcase \"name\":\n\t\t\t\treturn ec.fieldContext___EnumValue_name(ctx, field)\n\t\t\tcase \"description\":\n\t\t\t\treturn ec.fieldContext___EnumValue_description(ctx, field)\n\t\t\tcase \"isDeprecated\":\n\t\t\t\treturn ec.fieldContext___EnumValue_isDeprecated(ctx, field)\n\t\t\tcase \"deprecationReason\":\n\t\t\t\treturn ec.fieldContext___EnumValue_deprecationReason(ctx, field)\n\t\t\t}\n\t\t\treturn nil, fmt.Errorf(\"no field named %q was found under type __EnumValue\", field.Name)\n\t\t},\n\t}\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\terr = ec.Recover(ctx, r)\n\t\t\tec.Error(ctx, err)\n\t\t}\n\t}()\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tif fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn fc, err\n\t}\n\treturn fc, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"___Type_inputFields","start_line":2735,"end_line":2761,"code":"func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___Type_inputFields(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.InputFields(), nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.([]introspection.InputValue)\n\tfc.Result = res\n\treturn ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"fieldContext___Type_inputFields","start_line":2763,"end_line":2788,"code":"func (ec *executionContext) fieldContext___Type_inputFields(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__Type\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\tswitch field.Name {\n\t\t\tcase \"name\":\n\t\t\t\treturn ec.fieldContext___InputValue_name(ctx, field)\n\t\t\tcase \"description\":\n\t\t\t\treturn ec.fieldContext___InputValue_description(ctx, field)\n\t\t\tcase \"type\":\n\t\t\t\treturn ec.fieldContext___InputValue_type(ctx, field)\n\t\t\tcase \"defaultValue\":\n\t\t\t\treturn ec.fieldContext___InputValue_defaultValue(ctx, field)\n\t\t\tcase \"isDeprecated\":\n\t\t\t\treturn ec.fieldContext___InputValue_isDeprecated(ctx, field)\n\t\t\tcase \"deprecationReason\":\n\t\t\t\treturn ec.fieldContext___InputValue_deprecationReason(ctx, field)\n\t\t\t}\n\t\t\treturn nil, fmt.Errorf(\"no field named %q was found under type __InputValue\", field.Name)\n\t\t},\n\t}\n\treturn fc, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"___Type_ofType","start_line":2790,"end_line":2816,"code":"func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___Type_ofType(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.OfType(), nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(*introspection.Type)\n\tfc.Result = res\n\treturn ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"fieldContext___Type_ofType","start_line":2818,"end_line":2853,"code":"func (ec *executionContext) fieldContext___Type_ofType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__Type\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\tswitch field.Name {\n\t\t\tcase \"kind\":\n\t\t\t\treturn ec.fieldContext___Type_kind(ctx, field)\n\t\t\tcase \"name\":\n\t\t\t\treturn ec.fieldContext___Type_name(ctx, field)\n\t\t\tcase \"description\":\n\t\t\t\treturn ec.fieldContext___Type_description(ctx, field)\n\t\t\tcase \"specifiedByURL\":\n\t\t\t\treturn ec.fieldContext___Type_specifiedByURL(ctx, field)\n\t\t\tcase \"fields\":\n\t\t\t\treturn ec.fieldContext___Type_fields(ctx, field)\n\t\t\tcase \"interfaces\":\n\t\t\t\treturn ec.fieldContext___Type_interfaces(ctx, field)\n\t\t\tcase \"possibleTypes\":\n\t\t\t\treturn ec.fieldContext___Type_possibleTypes(ctx, field)\n\t\t\tcase \"enumValues\":\n\t\t\t\treturn ec.fieldContext___Type_enumValues(ctx, field)\n\t\t\tcase \"inputFields\":\n\t\t\t\treturn ec.fieldContext___Type_inputFields(ctx, field)\n\t\t\tcase \"ofType\":\n\t\t\t\treturn ec.fieldContext___Type_ofType(ctx, field)\n\t\t\tcase \"isOneOf\":\n\t\t\t\treturn ec.fieldContext___Type_isOneOf(ctx, field)\n\t\t\t}\n\t\t\treturn nil, fmt.Errorf(\"no field named %q was found under type __Type\", field.Name)\n\t\t},\n\t}\n\treturn fc, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"___Type_isOneOf","start_line":2855,"end_line":2881,"code":"func (ec *executionContext) ___Type_isOneOf(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___Type_isOneOf(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.IsOneOf(), nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(bool)\n\tfc.Result = res\n\treturn ec.marshalOBoolean2bool(ctx, field.Selections, res)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"fieldContext___Type_isOneOf","start_line":2883,"end_line":2894,"code":"func (ec *executionContext) fieldContext___Type_isOneOf(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__Type\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\treturn nil, errors.New(\"field of type Boolean does not have child fields\")\n\t\t},\n\t}\n\treturn fc, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"unmarshalInputNewTodo","start_line":2900,"end_line":2932,"code":"func (ec *executionContext) unmarshalInputNewTodo(ctx context.Context, obj any) (model.NewTodo, error) {\n\tvar it model.NewTodo\n\tasMap := map[string]any{}\n\tfor k, v := range obj.(map[string]any) {\n\t\tasMap[k] = v\n\t}\n\n\tfieldsInOrder := [...]string{\"text\", \"userId\"}\n\tfor _, k := range fieldsInOrder {\n\t\tv, ok := asMap[k]\n\t\tif !ok {\n\t\t\tcontinue\n\t\t}\n\t\tswitch k {\n\t\tcase \"text\":\n\t\t\tctx := graphql.WithPathContext(ctx, graphql.NewPathWithField(\"text\"))\n\t\t\tdata, err := ec.unmarshalNString2string(ctx, v)\n\t\t\tif err != nil {\n\t\t\t\treturn it, err\n\t\t\t}\n\t\t\tit.Text = data\n\t\tcase \"userId\":\n\t\t\tctx := graphql.WithPathContext(ctx, graphql.NewPathWithField(\"userId\"))\n\t\t\tdata, err := ec.unmarshalNString2string(ctx, v)\n\t\t\tif err != nil {\n\t\t\t\treturn it, err\n\t\t\t}\n\t\t\tit.UserID = data\n\t\t}\n\t}\n\n\treturn it, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"_Mutation","start_line":2944,"end_line":2989,"code":"func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {\n\tfields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)\n\tctx = graphql.WithFieldContext(ctx, \u0026graphql.FieldContext{\n\t\tObject: \"Mutation\",\n\t})\n\n\tout := graphql.NewFieldSet(fields)\n\tdeferred := make(map[string]*graphql.FieldSet)\n\tfor i, field := range fields {\n\t\tinnerCtx := graphql.WithRootFieldContext(ctx, \u0026graphql.RootFieldContext{\n\t\t\tObject: field.Name,\n\t\t\tField:  field,\n\t\t})\n\n\t\tswitch field.Name {\n\t\tcase \"__typename\":\n\t\t\tout.Values[i] = graphql.MarshalString(\"Mutation\")\n\t\tcase \"createTodo\":\n\t\t\tout.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {\n\t\t\t\treturn ec._Mutation_createTodo(ctx, field)\n\t\t\t})\n\t\t\tif out.Values[i] == graphql.Null {\n\t\t\t\tout.Invalids++\n\t\t\t}\n\t\tdefault:\n\t\t\tpanic(\"unknown field \" + strconv.Quote(field.Name))\n\t\t}\n\t}\n\tout.Dispatch(ctx)\n\tif out.Invalids \u003e 0 {\n\t\treturn graphql.Null\n\t}\n\n\tatomic.AddInt32(\u0026ec.deferred, int32(len(deferred)))\n\n\tfor label, dfs := range deferred {\n\t\tec.processDeferredGroup(graphql.DeferredGroup{\n\t\t\tLabel:    label,\n\t\t\tPath:     graphql.GetPath(ctx),\n\t\t\tFieldSet: dfs,\n\t\t\tContext:  ctx,\n\t\t})\n\t}\n\n\treturn out\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"_Query","start_line":2993,"end_line":3061,"code":"func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {\n\tfields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)\n\tctx = graphql.WithFieldContext(ctx, \u0026graphql.FieldContext{\n\t\tObject: \"Query\",\n\t})\n\n\tout := graphql.NewFieldSet(fields)\n\tdeferred := make(map[string]*graphql.FieldSet)\n\tfor i, field := range fields {\n\t\tinnerCtx := graphql.WithRootFieldContext(ctx, \u0026graphql.RootFieldContext{\n\t\t\tObject: field.Name,\n\t\t\tField:  field,\n\t\t})\n\n\t\tswitch field.Name {\n\t\tcase \"__typename\":\n\t\t\tout.Values[i] = graphql.MarshalString(\"Query\")\n\t\tcase \"todos\":\n\t\t\tfield := field\n\n\t\t\tinnerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {\n\t\t\t\tdefer func() {\n\t\t\t\t\tif r := recover(); r != nil {\n\t\t\t\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\t\t\t}\n\t\t\t\t}()\n\t\t\t\tres = ec._Query_todos(ctx, field)\n\t\t\t\tif res == graphql.Null {\n\t\t\t\t\tatomic.AddUint32(\u0026fs.Invalids, 1)\n\t\t\t\t}\n\t\t\t\treturn res\n\t\t\t}\n\n\t\t\trrm := func(ctx context.Context) graphql.Marshaler {\n\t\t\t\treturn ec.OperationContext.RootResolverMiddleware(ctx,\n\t\t\t\t\tfunc(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })\n\t\t\t}\n\n\t\t\tout.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })\n\t\tcase \"__type\":\n\t\t\tout.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {\n\t\t\t\treturn ec._Query___type(ctx, field)\n\t\t\t})\n\t\tcase \"__schema\":\n\t\t\tout.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {\n\t\t\t\treturn ec._Query___schema(ctx, field)\n\t\t\t})\n\t\tdefault:\n\t\t\tpanic(\"unknown field \" + strconv.Quote(field.Name))\n\t\t}\n\t}\n\tout.Dispatch(ctx)\n\tif out.Invalids \u003e 0 {\n\t\treturn graphql.Null\n\t}\n\n\tatomic.AddInt32(\u0026ec.deferred, int32(len(deferred)))\n\n\tfor label, dfs := range deferred {\n\t\tec.processDeferredGroup(graphql.DeferredGroup{\n\t\t\tLabel:    label,\n\t\t\tPath:     graphql.GetPath(ctx),\n\t\t\tFieldSet: dfs,\n\t\t\tContext:  ctx,\n\t\t})\n\t}\n\n\treturn out\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"_Todo","start_line":3065,"end_line":3115,"code":"func (ec *executionContext) _Todo(ctx context.Context, sel ast.SelectionSet, obj *model.Todo) graphql.Marshaler {\n\tfields := graphql.CollectFields(ec.OperationContext, sel, todoImplementors)\n\n\tout := graphql.NewFieldSet(fields)\n\tdeferred := make(map[string]*graphql.FieldSet)\n\tfor i, field := range fields {\n\t\tswitch field.Name {\n\t\tcase \"__typename\":\n\t\t\tout.Values[i] = graphql.MarshalString(\"Todo\")\n\t\tcase \"id\":\n\t\t\tout.Values[i] = ec._Todo_id(ctx, field, obj)\n\t\t\tif out.Values[i] == graphql.Null {\n\t\t\t\tout.Invalids++\n\t\t\t}\n\t\tcase \"text\":\n\t\t\tout.Values[i] = ec._Todo_text(ctx, field, obj)\n\t\t\tif out.Values[i] == graphql.Null {\n\t\t\t\tout.Invalids++\n\t\t\t}\n\t\tcase \"done\":\n\t\t\tout.Values[i] = ec._Todo_done(ctx, field, obj)\n\t\t\tif out.Values[i] == graphql.Null {\n\t\t\t\tout.Invalids++\n\t\t\t}\n\t\tcase \"user\":\n\t\t\tout.Values[i] = ec._Todo_user(ctx, field, obj)\n\t\t\tif out.Values[i] == graphql.Null {\n\t\t\t\tout.Invalids++\n\t\t\t}\n\t\tdefault:\n\t\t\tpanic(\"unknown field \" + strconv.Quote(field.Name))\n\t\t}\n\t}\n\tout.Dispatch(ctx)\n\tif out.Invalids \u003e 0 {\n\t\treturn graphql.Null\n\t}\n\n\tatomic.AddInt32(\u0026ec.deferred, int32(len(deferred)))\n\n\tfor label, dfs := range deferred {\n\t\tec.processDeferredGroup(graphql.DeferredGroup{\n\t\t\tLabel:    label,\n\t\t\tPath:     graphql.GetPath(ctx),\n\t\t\tFieldSet: dfs,\n\t\t\tContext:  ctx,\n\t\t})\n\t}\n\n\treturn out\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"_User","start_line":3119,"end_line":3159,"code":"func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *model.User) graphql.Marshaler {\n\tfields := graphql.CollectFields(ec.OperationContext, sel, userImplementors)\n\n\tout := graphql.NewFieldSet(fields)\n\tdeferred := make(map[string]*graphql.FieldSet)\n\tfor i, field := range fields {\n\t\tswitch field.Name {\n\t\tcase \"__typename\":\n\t\t\tout.Values[i] = graphql.MarshalString(\"User\")\n\t\tcase \"id\":\n\t\t\tout.Values[i] = ec._User_id(ctx, field, obj)\n\t\t\tif out.Values[i] == graphql.Null {\n\t\t\t\tout.Invalids++\n\t\t\t}\n\t\tcase \"name\":\n\t\t\tout.Values[i] = ec._User_name(ctx, field, obj)\n\t\t\tif out.Values[i] == graphql.Null {\n\t\t\t\tout.Invalids++\n\t\t\t}\n\t\tdefault:\n\t\t\tpanic(\"unknown field \" + strconv.Quote(field.Name))\n\t\t}\n\t}\n\tout.Dispatch(ctx)\n\tif out.Invalids \u003e 0 {\n\t\treturn graphql.Null\n\t}\n\n\tatomic.AddInt32(\u0026ec.deferred, int32(len(deferred)))\n\n\tfor label, dfs := range deferred {\n\t\tec.processDeferredGroup(graphql.DeferredGroup{\n\t\t\tLabel:    label,\n\t\t\tPath:     graphql.GetPath(ctx),\n\t\t\tFieldSet: dfs,\n\t\t\tContext:  ctx,\n\t\t})\n\t}\n\n\treturn out\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"___Directive","start_line":3163,"end_line":3215,"code":"func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {\n\tfields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)\n\n\tout := graphql.NewFieldSet(fields)\n\tdeferred := make(map[string]*graphql.FieldSet)\n\tfor i, field := range fields {\n\t\tswitch field.Name {\n\t\tcase \"__typename\":\n\t\t\tout.Values[i] = graphql.MarshalString(\"__Directive\")\n\t\tcase \"name\":\n\t\t\tout.Values[i] = ec.___Directive_name(ctx, field, obj)\n\t\t\tif out.Values[i] == graphql.Null {\n\t\t\t\tout.Invalids++\n\t\t\t}\n\t\tcase \"description\":\n\t\t\tout.Values[i] = ec.___Directive_description(ctx, field, obj)\n\t\tcase \"isRepeatable\":\n\t\t\tout.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)\n\t\t\tif out.Values[i] == graphql.Null {\n\t\t\t\tout.Invalids++\n\t\t\t}\n\t\tcase \"locations\":\n\t\t\tout.Values[i] = ec.___Directive_locations(ctx, field, obj)\n\t\t\tif out.Values[i] == graphql.Null {\n\t\t\t\tout.Invalids++\n\t\t\t}\n\t\tcase \"args\":\n\t\t\tout.Values[i] = ec.___Directive_args(ctx, field, obj)\n\t\t\tif out.Values[i] == graphql.Null {\n\t\t\t\tout.Invalids++\n\t\t\t}\n\t\tdefault:\n\t\t\tpanic(\"unknown field \" + strconv.Quote(field.Name))\n\t\t}\n\t}\n\tout.Dispatch(ctx)\n\tif out.Invalids \u003e 0 {\n\t\treturn graphql.Null\n\t}\n\n\tatomic.AddInt32(\u0026ec.deferred, int32(len(deferred)))\n\n\tfor label, dfs := range deferred {\n\t\tec.processDeferredGroup(graphql.DeferredGroup{\n\t\t\tLabel:    label,\n\t\t\tPath:     graphql.GetPath(ctx),\n\t\t\tFieldSet: dfs,\n\t\t\tContext:  ctx,\n\t\t})\n\t}\n\n\treturn out\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"___EnumValue","start_line":3219,"end_line":3263,"code":"func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {\n\tfields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)\n\n\tout := graphql.NewFieldSet(fields)\n\tdeferred := make(map[string]*graphql.FieldSet)\n\tfor i, field := range fields {\n\t\tswitch field.Name {\n\t\tcase \"__typename\":\n\t\t\tout.Values[i] = graphql.MarshalString(\"__EnumValue\")\n\t\tcase \"name\":\n\t\t\tout.Values[i] = ec.___EnumValue_name(ctx, field, obj)\n\t\t\tif out.Values[i] == graphql.Null {\n\t\t\t\tout.Invalids++\n\t\t\t}\n\t\tcase \"description\":\n\t\t\tout.Values[i] = ec.___EnumValue_description(ctx, field, obj)\n\t\tcase \"isDeprecated\":\n\t\t\tout.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)\n\t\t\tif out.Values[i] == graphql.Null {\n\t\t\t\tout.Invalids++\n\t\t\t}\n\t\tcase \"deprecationReason\":\n\t\t\tout.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)\n\t\tdefault:\n\t\t\tpanic(\"unknown field \" + strconv.Quote(field.Name))\n\t\t}\n\t}\n\tout.Dispatch(ctx)\n\tif out.Invalids \u003e 0 {\n\t\treturn graphql.Null\n\t}\n\n\tatomic.AddInt32(\u0026ec.deferred, int32(len(deferred)))\n\n\tfor label, dfs := range deferred {\n\t\tec.processDeferredGroup(graphql.DeferredGroup{\n\t\t\tLabel:    label,\n\t\t\tPath:     graphql.GetPath(ctx),\n\t\t\tFieldSet: dfs,\n\t\t\tContext:  ctx,\n\t\t})\n\t}\n\n\treturn out\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"___Field","start_line":3267,"end_line":3321,"code":"func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {\n\tfields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)\n\n\tout := graphql.NewFieldSet(fields)\n\tdeferred := make(map[string]*graphql.FieldSet)\n\tfor i, field := range fields {\n\t\tswitch field.Name {\n\t\tcase \"__typename\":\n\t\t\tout.Values[i] = graphql.MarshalString(\"__Field\")\n\t\tcase \"name\":\n\t\t\tout.Values[i] = ec.___Field_name(ctx, field, obj)\n\t\t\tif out.Values[i] == graphql.Null {\n\t\t\t\tout.Invalids++\n\t\t\t}\n\t\tcase \"description\":\n\t\t\tout.Values[i] = ec.___Field_description(ctx, field, obj)\n\t\tcase \"args\":\n\t\t\tout.Values[i] = ec.___Field_args(ctx, field, obj)\n\t\t\tif out.Values[i] == graphql.Null {\n\t\t\t\tout.Invalids++\n\t\t\t}\n\t\tcase \"type\":\n\t\t\tout.Values[i] = ec.___Field_type(ctx, field, obj)\n\t\t\tif out.Values[i] == graphql.Null {\n\t\t\t\tout.Invalids++\n\t\t\t}\n\t\tcase \"isDeprecated\":\n\t\t\tout.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)\n\t\t\tif out.Values[i] == graphql.Null {\n\t\t\t\tout.Invalids++\n\t\t\t}\n\t\tcase \"deprecationReason\":\n\t\t\tout.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)\n\t\tdefault:\n\t\t\tpanic(\"unknown field \" + strconv.Quote(field.Name))\n\t\t}\n\t}\n\tout.Dispatch(ctx)\n\tif out.Invalids \u003e 0 {\n\t\treturn graphql.Null\n\t}\n\n\tatomic.AddInt32(\u0026ec.deferred, int32(len(deferred)))\n\n\tfor label, dfs := range deferred {\n\t\tec.processDeferredGroup(graphql.DeferredGroup{\n\t\t\tLabel:    label,\n\t\t\tPath:     graphql.GetPath(ctx),\n\t\t\tFieldSet: dfs,\n\t\t\tContext:  ctx,\n\t\t})\n\t}\n\n\treturn out\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"___InputValue","start_line":3325,"end_line":3376,"code":"func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {\n\tfields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)\n\n\tout := graphql.NewFieldSet(fields)\n\tdeferred := make(map[string]*graphql.FieldSet)\n\tfor i, field := range fields {\n\t\tswitch field.Name {\n\t\tcase \"__typename\":\n\t\t\tout.Values[i] = graphql.MarshalString(\"__InputValue\")\n\t\tcase \"name\":\n\t\t\tout.Values[i] = ec.___InputValue_name(ctx, field, obj)\n\t\t\tif out.Values[i] == graphql.Null {\n\t\t\t\tout.Invalids++\n\t\t\t}\n\t\tcase \"description\":\n\t\t\tout.Values[i] = ec.___InputValue_description(ctx, field, obj)\n\t\tcase \"type\":\n\t\t\tout.Values[i] = ec.___InputValue_type(ctx, field, obj)\n\t\t\tif out.Values[i] == graphql.Null {\n\t\t\t\tout.Invalids++\n\t\t\t}\n\t\tcase \"defaultValue\":\n\t\t\tout.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)\n\t\tcase \"isDeprecated\":\n\t\t\tout.Values[i] = ec.___InputValue_isDeprecated(ctx, field, obj)\n\t\t\tif out.Values[i] == graphql.Null {\n\t\t\t\tout.Invalids++\n\t\t\t}\n\t\tcase \"deprecationReason\":\n\t\t\tout.Values[i] = ec.___InputValue_deprecationReason(ctx, field, obj)\n\t\tdefault:\n\t\t\tpanic(\"unknown field \" + strconv.Quote(field.Name))\n\t\t}\n\t}\n\tout.Dispatch(ctx)\n\tif out.Invalids \u003e 0 {\n\t\treturn graphql.Null\n\t}\n\n\tatomic.AddInt32(\u0026ec.deferred, int32(len(deferred)))\n\n\tfor label, dfs := range deferred {\n\t\tec.processDeferredGroup(graphql.DeferredGroup{\n\t\t\tLabel:    label,\n\t\t\tPath:     graphql.GetPath(ctx),\n\t\t\tFieldSet: dfs,\n\t\t\tContext:  ctx,\n\t\t})\n\t}\n\n\treturn out\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"___Schema","start_line":3380,"end_line":3431,"code":"func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {\n\tfields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)\n\n\tout := graphql.NewFieldSet(fields)\n\tdeferred := make(map[string]*graphql.FieldSet)\n\tfor i, field := range fields {\n\t\tswitch field.Name {\n\t\tcase \"__typename\":\n\t\t\tout.Values[i] = graphql.MarshalString(\"__Schema\")\n\t\tcase \"description\":\n\t\t\tout.Values[i] = ec.___Schema_description(ctx, field, obj)\n\t\tcase \"types\":\n\t\t\tout.Values[i] = ec.___Schema_types(ctx, field, obj)\n\t\t\tif out.Values[i] == graphql.Null {\n\t\t\t\tout.Invalids++\n\t\t\t}\n\t\tcase \"queryType\":\n\t\t\tout.Values[i] = ec.___Schema_queryType(ctx, field, obj)\n\t\t\tif out.Values[i] == graphql.Null {\n\t\t\t\tout.Invalids++\n\t\t\t}\n\t\tcase \"mutationType\":\n\t\t\tout.Values[i] = ec.___Schema_mutationType(ctx, field, obj)\n\t\tcase \"subscriptionType\":\n\t\t\tout.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)\n\t\tcase \"directives\":\n\t\t\tout.Values[i] = ec.___Schema_directives(ctx, field, obj)\n\t\t\tif out.Values[i] == graphql.Null {\n\t\t\t\tout.Invalids++\n\t\t\t}\n\t\tdefault:\n\t\t\tpanic(\"unknown field \" + strconv.Quote(field.Name))\n\t\t}\n\t}\n\tout.Dispatch(ctx)\n\tif out.Invalids \u003e 0 {\n\t\treturn graphql.Null\n\t}\n\n\tatomic.AddInt32(\u0026ec.deferred, int32(len(deferred)))\n\n\tfor label, dfs := range deferred {\n\t\tec.processDeferredGroup(graphql.DeferredGroup{\n\t\t\tLabel:    label,\n\t\t\tPath:     graphql.GetPath(ctx),\n\t\t\tFieldSet: dfs,\n\t\t\tContext:  ctx,\n\t\t})\n\t}\n\n\treturn out\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"___Type","start_line":3435,"end_line":3490,"code":"func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {\n\tfields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)\n\n\tout := graphql.NewFieldSet(fields)\n\tdeferred := make(map[string]*graphql.FieldSet)\n\tfor i, field := range fields {\n\t\tswitch field.Name {\n\t\tcase \"__typename\":\n\t\t\tout.Values[i] = graphql.MarshalString(\"__Type\")\n\t\tcase \"kind\":\n\t\t\tout.Values[i] = ec.___Type_kind(ctx, field, obj)\n\t\t\tif out.Values[i] == graphql.Null {\n\t\t\t\tout.Invalids++\n\t\t\t}\n\t\tcase \"name\":\n\t\t\tout.Values[i] = ec.___Type_name(ctx, field, obj)\n\t\tcase \"description\":\n\t\t\tout.Values[i] = ec.___Type_description(ctx, field, obj)\n\t\tcase \"specifiedByURL\":\n\t\t\tout.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)\n\t\tcase \"fields\":\n\t\t\tout.Values[i] = ec.___Type_fields(ctx, field, obj)\n\t\tcase \"interfaces\":\n\t\t\tout.Values[i] = ec.___Type_interfaces(ctx, field, obj)\n\t\tcase \"possibleTypes\":\n\t\t\tout.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)\n\t\tcase \"enumValues\":\n\t\t\tout.Values[i] = ec.___Type_enumValues(ctx, field, obj)\n\t\tcase \"inputFields\":\n\t\t\tout.Values[i] = ec.___Type_inputFields(ctx, field, obj)\n\t\tcase \"ofType\":\n\t\t\tout.Values[i] = ec.___Type_ofType(ctx, field, obj)\n\t\tcase \"isOneOf\":\n\t\t\tout.Values[i] = ec.___Type_isOneOf(ctx, field, obj)\n\t\tdefault:\n\t\t\tpanic(\"unknown field \" + strconv.Quote(field.Name))\n\t\t}\n\t}\n\tout.Dispatch(ctx)\n\tif out.Invalids \u003e 0 {\n\t\treturn graphql.Null\n\t}\n\n\tatomic.AddInt32(\u0026ec.deferred, int32(len(deferred)))\n\n\tfor label, dfs := range deferred {\n\t\tec.processDeferredGroup(graphql.DeferredGroup{\n\t\t\tLabel:    label,\n\t\t\tPath:     graphql.GetPath(ctx),\n\t\t\tFieldSet: dfs,\n\t\t\tContext:  ctx,\n\t\t})\n\t}\n\n\treturn out\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"unmarshalNBoolean2bool","start_line":3496,"end_line":3499,"code":"func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v any) (bool, error) {\n\tres, err := graphql.UnmarshalBoolean(v)\n\treturn res, graphql.ErrorOnPath(ctx, err)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"marshalNBoolean2bool","start_line":3501,"end_line":3509,"code":"func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {\n\tres := graphql.MarshalBoolean(v)\n\tif res == graphql.Null {\n\t\tif !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {\n\t\t\tec.Errorf(ctx, \"the requested element is null which the schema does not allow\")\n\t\t}\n\t}\n\treturn res\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"unmarshalNID2string","start_line":3511,"end_line":3514,"code":"func (ec *executionContext) unmarshalNID2string(ctx context.Context, v any) (string, error) {\n\tres, err := graphql.UnmarshalID(v)\n\treturn res, graphql.ErrorOnPath(ctx, err)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"marshalNID2string","start_line":3516,"end_line":3524,"code":"func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {\n\tres := graphql.MarshalID(v)\n\tif res == graphql.Null {\n\t\tif !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {\n\t\t\tec.Errorf(ctx, \"the requested element is null which the schema does not allow\")\n\t\t}\n\t}\n\treturn res\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"unmarshalNNewTodo2goforumᚋgraphᚋmodelᚐNewTodo","start_line":3526,"end_line":3529,"code":"func (ec *executionContext) unmarshalNNewTodo2goforumᚋgraphᚋmodelᚐNewTodo(ctx context.Context, v any) (model.NewTodo, error) {\n\tres, err := ec.unmarshalInputNewTodo(ctx, v)\n\treturn res, graphql.ErrorOnPath(ctx, err)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"unmarshalNString2string","start_line":3531,"end_line":3534,"code":"func (ec *executionContext) unmarshalNString2string(ctx context.Context, v any) (string, error) {\n\tres, err := graphql.UnmarshalString(v)\n\treturn res, graphql.ErrorOnPath(ctx, err)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"marshalNString2string","start_line":3536,"end_line":3544,"code":"func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {\n\tres := graphql.MarshalString(v)\n\tif res == graphql.Null {\n\t\tif !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {\n\t\t\tec.Errorf(ctx, \"the requested element is null which the schema does not allow\")\n\t\t}\n\t}\n\treturn res\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"marshalNTodo2goforumᚋgraphᚋmodelᚐTodo","start_line":3546,"end_line":3548,"code":"func (ec *executionContext) marshalNTodo2goforumᚋgraphᚋmodelᚐTodo(ctx context.Context, sel ast.SelectionSet, v model.Todo) graphql.Marshaler {\n\treturn ec._Todo(ctx, sel, \u0026v)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"marshalNTodo2ᚕᚖgoforumᚋgraphᚋmodelᚐTodoᚄ","start_line":3550,"end_line":3592,"code":"func (ec *executionContext) marshalNTodo2ᚕᚖgoforumᚋgraphᚋmodelᚐTodoᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Todo) graphql.Marshaler {\n\tret := make(graphql.Array, len(v))\n\tvar wg sync.WaitGroup\n\tisLen1 := len(v) == 1\n\tif !isLen1 {\n\t\twg.Add(len(v))\n\t}\n\tfor i := range v {\n\t\ti := i\n\t\tfc := \u0026graphql.FieldContext{\n\t\t\tIndex:  \u0026i,\n\t\t\tResult: \u0026v[i],\n\t\t}\n\t\tctx := graphql.WithFieldContext(ctx, fc)\n\t\tf := func(i int) {\n\t\t\tdefer func() {\n\t\t\t\tif r := recover(); r != nil {\n\t\t\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\t\t\tret = nil\n\t\t\t\t}\n\t\t\t}()\n\t\t\tif !isLen1 {\n\t\t\t\tdefer wg.Done()\n\t\t\t}\n\t\t\tret[i] = ec.marshalNTodo2ᚖgoforumᚋgraphᚋmodelᚐTodo(ctx, sel, v[i])\n\t\t}\n\t\tif isLen1 {\n\t\t\tf(i)\n\t\t} else {\n\t\t\tgo f(i)\n\t\t}\n\n\t}\n\twg.Wait()\n\n\tfor _, e := range ret {\n\t\tif e == graphql.Null {\n\t\t\treturn graphql.Null\n\t\t}\n\t}\n\n\treturn ret\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"marshalNTodo2ᚖgoforumᚋgraphᚋmodelᚐTodo","start_line":3594,"end_line":3602,"code":"func (ec *executionContext) marshalNTodo2ᚖgoforumᚋgraphᚋmodelᚐTodo(ctx context.Context, sel ast.SelectionSet, v *model.Todo) graphql.Marshaler {\n\tif v == nil {\n\t\tif !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {\n\t\t\tec.Errorf(ctx, \"the requested element is null which the schema does not allow\")\n\t\t}\n\t\treturn graphql.Null\n\t}\n\treturn ec._Todo(ctx, sel, v)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"marshalNUser2ᚖgoforumᚋgraphᚋmodelᚐUser","start_line":3604,"end_line":3612,"code":"func (ec *executionContext) marshalNUser2ᚖgoforumᚋgraphᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v *model.User) graphql.Marshaler {\n\tif v == nil {\n\t\tif !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {\n\t\t\tec.Errorf(ctx, \"the requested element is null which the schema does not allow\")\n\t\t}\n\t\treturn graphql.Null\n\t}\n\treturn ec._User(ctx, sel, v)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective","start_line":3614,"end_line":3616,"code":"func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {\n\treturn ec.___Directive(ctx, sel, \u0026v)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ","start_line":3618,"end_line":3660,"code":"func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {\n\tret := make(graphql.Array, len(v))\n\tvar wg sync.WaitGroup\n\tisLen1 := len(v) == 1\n\tif !isLen1 {\n\t\twg.Add(len(v))\n\t}\n\tfor i := range v {\n\t\ti := i\n\t\tfc := \u0026graphql.FieldContext{\n\t\t\tIndex:  \u0026i,\n\t\t\tResult: \u0026v[i],\n\t\t}\n\t\tctx := graphql.WithFieldContext(ctx, fc)\n\t\tf := func(i int) {\n\t\t\tdefer func() {\n\t\t\t\tif r := recover(); r != nil {\n\t\t\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\t\t\tret = nil\n\t\t\t\t}\n\t\t\t}()\n\t\t\tif !isLen1 {\n\t\t\t\tdefer wg.Done()\n\t\t\t}\n\t\t\tret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])\n\t\t}\n\t\tif isLen1 {\n\t\t\tf(i)\n\t\t} else {\n\t\t\tgo f(i)\n\t\t}\n\n\t}\n\twg.Wait()\n\n\tfor _, e := range ret {\n\t\tif e == graphql.Null {\n\t\t\treturn graphql.Null\n\t\t}\n\t}\n\n\treturn ret\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"unmarshalN__DirectiveLocation2string","start_line":3662,"end_line":3665,"code":"func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v any) (string, error) {\n\tres, err := graphql.UnmarshalString(v)\n\treturn res, graphql.ErrorOnPath(ctx, err)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"marshalN__DirectiveLocation2string","start_line":3667,"end_line":3675,"code":"func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {\n\tres := graphql.MarshalString(v)\n\tif res == graphql.Null {\n\t\tif !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {\n\t\t\tec.Errorf(ctx, \"the requested element is null which the schema does not allow\")\n\t\t}\n\t}\n\treturn res\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"unmarshalN__DirectiveLocation2ᚕstringᚄ","start_line":3677,"end_line":3690,"code":"func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {\n\tvar vSlice []any\n\tvSlice = graphql.CoerceList(v)\n\tvar err error\n\tres := make([]string, len(vSlice))\n\tfor i := range vSlice {\n\t\tctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))\n\t\tres[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\treturn res, nil\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"marshalN__DirectiveLocation2ᚕstringᚄ","start_line":3692,"end_line":3734,"code":"func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {\n\tret := make(graphql.Array, len(v))\n\tvar wg sync.WaitGroup\n\tisLen1 := len(v) == 1\n\tif !isLen1 {\n\t\twg.Add(len(v))\n\t}\n\tfor i := range v {\n\t\ti := i\n\t\tfc := \u0026graphql.FieldContext{\n\t\t\tIndex:  \u0026i,\n\t\t\tResult: \u0026v[i],\n\t\t}\n\t\tctx := graphql.WithFieldContext(ctx, fc)\n\t\tf := func(i int) {\n\t\t\tdefer func() {\n\t\t\t\tif r := recover(); r != nil {\n\t\t\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\t\t\tret = nil\n\t\t\t\t}\n\t\t\t}()\n\t\t\tif !isLen1 {\n\t\t\t\tdefer wg.Done()\n\t\t\t}\n\t\t\tret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])\n\t\t}\n\t\tif isLen1 {\n\t\t\tf(i)\n\t\t} else {\n\t\t\tgo f(i)\n\t\t}\n\n\t}\n\twg.Wait()\n\n\tfor _, e := range ret {\n\t\tif e == graphql.Null {\n\t\t\treturn graphql.Null\n\t\t}\n\t}\n\n\treturn ret\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue","start_line":3736,"end_line":3738,"code":"func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {\n\treturn ec.___EnumValue(ctx, sel, \u0026v)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField","start_line":3740,"end_line":3742,"code":"func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {\n\treturn ec.___Field(ctx, sel, \u0026v)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue","start_line":3744,"end_line":3746,"code":"func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {\n\treturn ec.___InputValue(ctx, sel, \u0026v)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ","start_line":3748,"end_line":3790,"code":"func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {\n\tret := make(graphql.Array, len(v))\n\tvar wg sync.WaitGroup\n\tisLen1 := len(v) == 1\n\tif !isLen1 {\n\t\twg.Add(len(v))\n\t}\n\tfor i := range v {\n\t\ti := i\n\t\tfc := \u0026graphql.FieldContext{\n\t\t\tIndex:  \u0026i,\n\t\t\tResult: \u0026v[i],\n\t\t}\n\t\tctx := graphql.WithFieldContext(ctx, fc)\n\t\tf := func(i int) {\n\t\t\tdefer func() {\n\t\t\t\tif r := recover(); r != nil {\n\t\t\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\t\t\tret = nil\n\t\t\t\t}\n\t\t\t}()\n\t\t\tif !isLen1 {\n\t\t\t\tdefer wg.Done()\n\t\t\t}\n\t\t\tret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])\n\t\t}\n\t\tif isLen1 {\n\t\t\tf(i)\n\t\t} else {\n\t\t\tgo f(i)\n\t\t}\n\n\t}\n\twg.Wait()\n\n\tfor _, e := range ret {\n\t\tif e == graphql.Null {\n\t\t\treturn graphql.Null\n\t\t}\n\t}\n\n\treturn ret\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType","start_line":3792,"end_line":3794,"code":"func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {\n\treturn ec.___Type(ctx, sel, \u0026v)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ","start_line":3796,"end_line":3838,"code":"func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {\n\tret := make(graphql.Array, len(v))\n\tvar wg sync.WaitGroup\n\tisLen1 := len(v) == 1\n\tif !isLen1 {\n\t\twg.Add(len(v))\n\t}\n\tfor i := range v {\n\t\ti := i\n\t\tfc := \u0026graphql.FieldContext{\n\t\t\tIndex:  \u0026i,\n\t\t\tResult: \u0026v[i],\n\t\t}\n\t\tctx := graphql.WithFieldContext(ctx, fc)\n\t\tf := func(i int) {\n\t\t\tdefer func() {\n\t\t\t\tif r := recover(); r != nil {\n\t\t\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\t\t\tret = nil\n\t\t\t\t}\n\t\t\t}()\n\t\t\tif !isLen1 {\n\t\t\t\tdefer wg.Done()\n\t\t\t}\n\t\t\tret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])\n\t\t}\n\t\tif isLen1 {\n\t\t\tf(i)\n\t\t} else {\n\t\t\tgo f(i)\n\t\t}\n\n\t}\n\twg.Wait()\n\n\tfor _, e := range ret {\n\t\tif e == graphql.Null {\n\t\t\treturn graphql.Null\n\t\t}\n\t}\n\n\treturn ret\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType","start_line":3840,"end_line":3848,"code":"func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {\n\tif v == nil {\n\t\tif !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {\n\t\t\tec.Errorf(ctx, \"the requested element is null which the schema does not allow\")\n\t\t}\n\t\treturn graphql.Null\n\t}\n\treturn ec.___Type(ctx, sel, v)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"unmarshalN__TypeKind2string","start_line":3850,"end_line":3853,"code":"func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v any) (string, error) {\n\tres, err := graphql.UnmarshalString(v)\n\treturn res, graphql.ErrorOnPath(ctx, err)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"marshalN__TypeKind2string","start_line":3855,"end_line":3863,"code":"func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {\n\tres := graphql.MarshalString(v)\n\tif res == graphql.Null {\n\t\tif !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {\n\t\t\tec.Errorf(ctx, \"the requested element is null which the schema does not allow\")\n\t\t}\n\t}\n\treturn res\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"unmarshalOBoolean2bool","start_line":3865,"end_line":3868,"code":"func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v any) (bool, error) {\n\tres, err := graphql.UnmarshalBoolean(v)\n\treturn res, graphql.ErrorOnPath(ctx, err)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"marshalOBoolean2bool","start_line":3870,"end_line":3873,"code":"func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {\n\tres := graphql.MarshalBoolean(v)\n\treturn res\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"unmarshalOBoolean2ᚖbool","start_line":3875,"end_line":3881,"code":"func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v any) (*bool, error) {\n\tif v == nil {\n\t\treturn nil, nil\n\t}\n\tres, err := graphql.UnmarshalBoolean(v)\n\treturn \u0026res, graphql.ErrorOnPath(ctx, err)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"marshalOBoolean2ᚖbool","start_line":3883,"end_line":3889,"code":"func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {\n\tif v == nil {\n\t\treturn graphql.Null\n\t}\n\tres := graphql.MarshalBoolean(*v)\n\treturn res\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"unmarshalOString2ᚖstring","start_line":3891,"end_line":3897,"code":"func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v any) (*string, error) {\n\tif v == nil {\n\t\treturn nil, nil\n\t}\n\tres, err := graphql.UnmarshalString(v)\n\treturn \u0026res, graphql.ErrorOnPath(ctx, err)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"marshalOString2ᚖstring","start_line":3899,"end_line":3905,"code":"func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {\n\tif v == nil {\n\t\treturn graphql.Null\n\t}\n\tres := graphql.MarshalString(*v)\n\treturn res\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ","start_line":3907,"end_line":3952,"code":"func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {\n\tif v == nil {\n\t\treturn graphql.Null\n\t}\n\tret := make(graphql.Array, len(v))\n\tvar wg sync.WaitGroup\n\tisLen1 := len(v) == 1\n\tif !isLen1 {\n\t\twg.Add(len(v))\n\t}\n\tfor i := range v {\n\t\ti := i\n\t\tfc := \u0026graphql.FieldContext{\n\t\t\tIndex:  \u0026i,\n\t\t\tResult: \u0026v[i],\n\t\t}\n\t\tctx := graphql.WithFieldContext(ctx, fc)\n\t\tf := func(i int) {\n\t\t\tdefer func() {\n\t\t\t\tif r := recover(); r != nil {\n\t\t\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\t\t\tret = nil\n\t\t\t\t}\n\t\t\t}()\n\t\t\tif !isLen1 {\n\t\t\t\tdefer wg.Done()\n\t\t\t}\n\t\t\tret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])\n\t\t}\n\t\tif isLen1 {\n\t\t\tf(i)\n\t\t} else {\n\t\t\tgo f(i)\n\t\t}\n\n\t}\n\twg.Wait()\n\n\tfor _, e := range ret {\n\t\tif e == graphql.Null {\n\t\t\treturn graphql.Null\n\t\t}\n\t}\n\n\treturn ret\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ","start_line":3954,"end_line":3999,"code":"func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {\n\tif v == nil {\n\t\treturn graphql.Null\n\t}\n\tret := make(graphql.Array, len(v))\n\tvar wg sync.WaitGroup\n\tisLen1 := len(v) == 1\n\tif !isLen1 {\n\t\twg.Add(len(v))\n\t}\n\tfor i := range v {\n\t\ti := i\n\t\tfc := \u0026graphql.FieldContext{\n\t\t\tIndex:  \u0026i,\n\t\t\tResult: \u0026v[i],\n\t\t}\n\t\tctx := graphql.WithFieldContext(ctx, fc)\n\t\tf := func(i int) {\n\t\t\tdefer func() {\n\t\t\t\tif r := recover(); r != nil {\n\t\t\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\t\t\tret = nil\n\t\t\t\t}\n\t\t\t}()\n\t\t\tif !isLen1 {\n\t\t\t\tdefer wg.Done()\n\t\t\t}\n\t\t\tret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])\n\t\t}\n\t\tif isLen1 {\n\t\t\tf(i)\n\t\t} else {\n\t\t\tgo f(i)\n\t\t}\n\n\t}\n\twg.Wait()\n\n\tfor _, e := range ret {\n\t\tif e == graphql.Null {\n\t\t\treturn graphql.Null\n\t\t}\n\t}\n\n\treturn ret\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ","start_line":4001,"end_line":4046,"code":"func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {\n\tif v == nil {\n\t\treturn graphql.Null\n\t}\n\tret := make(graphql.Array, len(v))\n\tvar wg sync.WaitGroup\n\tisLen1 := len(v) == 1\n\tif !isLen1 {\n\t\twg.Add(len(v))\n\t}\n\tfor i := range v {\n\t\ti := i\n\t\tfc := \u0026graphql.FieldContext{\n\t\t\tIndex:  \u0026i,\n\t\t\tResult: \u0026v[i],\n\t\t}\n\t\tctx := graphql.WithFieldContext(ctx, fc)\n\t\tf := func(i int) {\n\t\t\tdefer func() {\n\t\t\t\tif r := recover(); r != nil {\n\t\t\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\t\t\tret = nil\n\t\t\t\t}\n\t\t\t}()\n\t\t\tif !isLen1 {\n\t\t\t\tdefer wg.Done()\n\t\t\t}\n\t\t\tret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])\n\t\t}\n\t\tif isLen1 {\n\t\t\tf(i)\n\t\t} else {\n\t\t\tgo f(i)\n\t\t}\n\n\t}\n\twg.Wait()\n\n\tfor _, e := range ret {\n\t\tif e == graphql.Null {\n\t\t\treturn graphql.Null\n\t\t}\n\t}\n\n\treturn ret\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema","start_line":4048,"end_line":4053,"code":"func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {\n\tif v == nil {\n\t\treturn graphql.Null\n\t}\n\treturn ec.___Schema(ctx, sel, v)\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ","start_line":4055,"end_line":4100,"code":"func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {\n\tif v == nil {\n\t\treturn graphql.Null\n\t}\n\tret := make(graphql.Array, len(v))\n\tvar wg sync.WaitGroup\n\tisLen1 := len(v) == 1\n\tif !isLen1 {\n\t\twg.Add(len(v))\n\t}\n\tfor i := range v {\n\t\ti := i\n\t\tfc := \u0026graphql.FieldContext{\n\t\t\tIndex:  \u0026i,\n\t\t\tResult: \u0026v[i],\n\t\t}\n\t\tctx := graphql.WithFieldContext(ctx, fc)\n\t\tf := func(i int) {\n\t\t\tdefer func() {\n\t\t\t\tif r := recover(); r != nil {\n\t\t\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\t\t\tret = nil\n\t\t\t\t}\n\t\t\t}()\n\t\t\tif !isLen1 {\n\t\t\t\tdefer wg.Done()\n\t\t\t}\n\t\t\tret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])\n\t\t}\n\t\tif isLen1 {\n\t\t\tf(i)\n\t\t} else {\n\t\t\tgo f(i)\n\t\t}\n\n\t}\n\twg.Wait()\n\n\tfor _, e := range ret {\n\t\tif e == graphql.Null {\n\t\t\treturn graphql.Null\n\t\t}\n\t}\n\n\treturn ret\n}"}
{"file":"forum_backend\\graph\\generated.go","symbol":"marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType","start_line":4102,"end_line":4107,"code":"func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {\n\tif v == nil {\n\t\treturn graphql.Null\n\t}\n\treturn ec.___Type(ctx, sel, v)\n}"}
{"file":"forum_backend\\graph\\schema.resolvers.go","symbol":"CreateTodo","start_line":14,"end_line":16,"code":"func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {\n\tpanic(fmt.Errorf(\"not implemented: CreateTodo - createTodo\"))\n}"}
{"file":"forum_backend\\graph\\schema.resolvers.go","symbol":"Todos","start_line":19,"end_line":21,"code":"func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {\n\tpanic(fmt.Errorf(\"not implemented: Todos - todos\"))\n}"}
{"file":"forum_backend\\graph\\schema.resolvers.go","symbol":"Mutation","start_line":24,"end_line":24,"code":"func (r *Resolver) Mutation() MutationResolver { return \u0026mutationResolver{r} }"}
{"file":"forum_backend\\graph\\schema.resolvers.go","symbol":"Query","start_line":27,"end_line":27,"code":"func (r *Resolver) Query() QueryResolver { return \u0026queryResolver{r} }"}
{"file":"forum_backend\\main.go","symbol":"main","start_line":11,"end_line":32,"code":"func main() {\r\n\tapp := fiber.New()\r\n\r\n\tconfig.ConnectDatabase()\r\n\tconfig.DB.AutoMigrate(\u0026models.User{}, \u0026models.Post{})\r\n\r\n\troutes.AuthRoutes(app)\r\n\troutes.ProtectedRoutes(app) // 注册需要鉴权的路由\r\n\troutes.PostRoutes(app)\r\n\troutes.CommentRoutes(app)\r\n\troutes.UserRoutes(app)\r\n\r\n\t// srv := handler.New(generated.NewExecutableSchema(generated.Config{\r\n\t// \tResolvers: \u0026graph.Resolver{},\r\n\t// }))\r\n\t// 用 adaptor 将 net/http Handler 转为 fiber.Handler\r\n\t// 注册 graphql 和 playground\r\n\t// app.All(\"/graphql\", adaptor.HTTPHandler(srv))\r\n\t// app.All(\"/playground\", adaptor.HTTPHandler(playground.Handler(\"GraphQL Playground\", \"/graphql\")))\r\n\r\n\tapp.Listen(\":3000\")\r\n}"}
{"file":"forum_backend\\middleware\\auth.go","symbol":"RequireAuth","start_line":13,"end_line":52,"code":"func RequireAuth(c fiber.Ctx) error {\r\n\tauthHeader := c.Get(\"Authorization\")\r\n\tif authHeader == \"\" || !strings.HasPrefix(authHeader, \"Bearer \") {\r\n\t\treturn c.Status(fiber.StatusUnauthorized).JSON(fiber.Map{\r\n\t\t\t\"error\": \"Missing or invalid Authorization header\",\r\n\t\t})\r\n\t}\r\n\r\n\ttokenString := strings.TrimPrefix(authHeader, \"Bearer \")\r\n\r\n\ttoken, err := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) {\r\n\t\treturn []byte(os.Getenv(\"JWT_SECRET\")), nil\r\n\t})\r\n\tif err != nil || !token.Valid {\r\n\t\treturn c.Status(fiber.StatusUnauthorized).JSON(fiber.Map{\r\n\t\t\t\"error\": \"Invalid or expired token\",\r\n\t\t})\r\n\t}\r\n\r\n\tclaims, ok := token.Claims.(jwt.MapClaims)\r\n\tif !ok || !token.Valid {\r\n\t\treturn c.Status(fiber.StatusUnauthorized).JSON(fiber.Map{\r\n\t\t\t\"error\": \"Invalid token claims\",\r\n\t\t})\r\n\t}\r\n\r\n\tuserId := uint(claims[\"id\"].(float64))\r\n\r\n\tvar user models.User\r\n\tif err := config.DB.First(\u0026user, userId).Error; err != nil {\r\n\t\treturn c.Status(fiber.StatusUnauthorized).JSON(fiber.Map{\r\n\t\t\t\"error\": \"User not found\",\r\n\t\t})\r\n\t}\r\n\r\n\t// 将 user 保存到 context 里\r\n\tc.Locals(\"user\", user)\r\n\r\n\treturn c.Next()\r\n}"}
{"file":"forum_backend\\routes\\auth_routes.go","symbol":"AuthRoutes","start_line":10,"end_line":13,"code":"func AuthRoutes(app *fiber.App) {\r\n\tapp.Post(\"/api/register\", controllers.Register)\r\n\tapp.Post(\"/api/login\", controllers.Login)\r\n}"}
{"file":"forum_backend\\routes\\auth_routes.go","symbol":"ProtectedRoutes","start_line":15,"end_line":23,"code":"func ProtectedRoutes(app *fiber.App) {\r\n\tapp.Get(\"/api/profile\", middleware.RequireAuth, func(c fiber.Ctx) error {\r\n\t\tuser := c.Locals(\"user\")\r\n\t\treturn c.JSON(fiber.Map{\r\n\t\t\t\"message\": \"You are authenticated\",\r\n\t\t\t\"user\":    user,\r\n\t\t})\r\n\t})\r\n}"}
{"file":"forum_backend\\routes\\comment_routes.go","symbol":"CommentRoutes","start_line":10,"end_line":14,"code":"func CommentRoutes(app *fiber.App) {\r\n\tapp.Post(\"/api/posts/:id/comments\", middleware.RequireAuth, controllers.CreateComment)\r\n\tapp.Get(\"/api/posts/:id/comments\", controllers.GetCommentsByPost)\r\n\tapp.Delete(\"/api/comments/:id\", middleware.RequireAuth, controllers.DeleteComment)\r\n}"}
{"file":"forum_backend\\routes\\post_routes.go","symbol":"PostRoutes","start_line":10,"end_line":14,"code":"func PostRoutes(app *fiber.App) {\r\n\tapp.Post(\"/api/posts\", middleware.RequireAuth, controllers.CreatePost)\r\n\tapp.Get(\"/api/posts\", controllers.GetPosts)\r\n\tapp.Delete(\"/api/posts/:id\", middleware.RequireAuth, controllers.DeletePost)\r\n}"}
{"file":"forum_backend\\routes\\user_routes.go","symbol":"UserRoutes","start_line":10,"end_line":13,"code":"func UserRoutes(app *fiber.App) {\r\n\tapp.Get(\"/api/me\", middleware.RequireAuth, controllers.GetMyProfile)\r\n\tapp.Get(\"/api/users/:id\", controllers.GetUserProfile)\r\n}"}
